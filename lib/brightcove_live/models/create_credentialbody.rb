=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module BrightcoveLive
  class CreateCredentialbody
    # Whether these are the default credentials for the request type
    attr_accessor :credential_default_for_type

    # Label for the credential
    attr_accessor :credential_label

    # Private key or password depending on the type
    attr_accessor :credential_private

    # Public key or password depending on the type
    attr_accessor :credential_public

    # The credential type
    attr_accessor :credential_type

    attr_accessor :oauth_settings

    # GUID for which the credentials are being created.
    attr_accessor :user_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'credential_default_for_type' => :'credential_default_for_type',
        :'credential_label' => :'credential_label',
        :'credential_private' => :'credential_private',
        :'credential_public' => :'credential_public',
        :'credential_type' => :'credential_type',
        :'oauth_settings' => :'oauth_settings',
        :'user_id' => :'user_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'credential_default_for_type' => :'Boolean',
        :'credential_label' => :'String',
        :'credential_private' => :'String',
        :'credential_public' => :'String',
        :'credential_type' => :'String',
        :'oauth_settings' => :'CreateCredentialbodyOauthSettings',
        :'user_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BrightcoveLive::CreateCredentialbody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BrightcoveLive::CreateCredentialbody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'credential_default_for_type')
        self.credential_default_for_type = attributes[:'credential_default_for_type']
      else
        self.credential_default_for_type = false
      end

      if attributes.key?(:'credential_label')
        self.credential_label = attributes[:'credential_label']
      end

      if attributes.key?(:'credential_private')
        self.credential_private = attributes[:'credential_private']
      end

      if attributes.key?(:'credential_public')
        self.credential_public = attributes[:'credential_public']
      end

      if attributes.key?(:'credential_type')
        self.credential_type = attributes[:'credential_type']
      end

      if attributes.key?(:'oauth_settings')
        self.oauth_settings = attributes[:'oauth_settings']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      else
        self.user_id = '(all users)'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @credential_label.nil?
        invalid_properties.push('invalid value for "credential_label", credential_label cannot be nil.')
      end

      if @credential_private.nil?
        invalid_properties.push('invalid value for "credential_private", credential_private cannot be nil.')
      end

      if @credential_public.nil?
        invalid_properties.push('invalid value for "credential_public", credential_public cannot be nil.')
      end

      if @credential_type.nil?
        invalid_properties.push('invalid value for "credential_type", credential_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @credential_label.nil?
      return false if @credential_private.nil?
      return false if @credential_public.nil?
      return false if @credential_type.nil?
      credential_type_validator = EnumAttributeValidator.new('String', ["ftp", "http", "oauth", "rtmp", "s3", "videocloud", "zencoder"])
      return false unless credential_type_validator.valid?(@credential_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] credential_type Object to be assigned
    def credential_type=(credential_type)
      validator = EnumAttributeValidator.new('String', ["ftp", "http", "oauth", "rtmp", "s3", "videocloud", "zencoder"])
      unless validator.valid?(credential_type)
        fail ArgumentError, "invalid value for \"credential_type\", must be one of #{validator.allowable_values}."
      end
      @credential_type = credential_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          credential_default_for_type == o.credential_default_for_type &&
          credential_label == o.credential_label &&
          credential_private == o.credential_private &&
          credential_public == o.credential_public &&
          credential_type == o.credential_type &&
          oauth_settings == o.oauth_settings &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [credential_default_for_type, credential_label, credential_private, credential_public, credential_type, oauth_settings, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BrightcoveLive.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
