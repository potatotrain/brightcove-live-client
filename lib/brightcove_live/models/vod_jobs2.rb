=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'date'

module BrightcoveLive
  class VodJobs2
    # The clip job id
    attr_accessor :jvod_id

    # The clip label (from the input)
    attr_accessor :label

    # The parent job id
    attr_accessor :job_id

    # Current vod job processing state
    attr_accessor :jvod_state

    # VOD job type
    attr_accessor :jvod_type

    # VOD job destination (e.g. s3://somebucket or ftp://someserver)
    attr_accessor :jvod_url

    # Time vod job was created (UNIX time in milliseconds)
    attr_accessor :jvod_created_at

    # Time vod job was last modified (UNIX time in milliseconds)
    attr_accessor :jvod_last_state_change_at

    # Time vod job completed processing (UNIX time in milliseconds)
    attr_accessor :jvod_finished_at

    # Length of VOD clip requested (seconds)
    attr_accessor :jvod_duration_s

    # Length of VOD clip as generated (seconds)
    attr_accessor :jvod_reported_duration_s

    # Region VOD job is processed in
    attr_accessor :jvod_region

    # ID of creating user
    attr_accessor :user_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'jvod_id' => :'jvod_id',
        :'label' => :'label',
        :'job_id' => :'job_id',
        :'jvod_state' => :'jvod_state',
        :'jvod_type' => :'jvod_type',
        :'jvod_url' => :'jvod_url',
        :'jvod_created_at' => :'jvod_created_at',
        :'jvod_last_state_change_at' => :'jvod_last_state_change_at',
        :'jvod_finished_at' => :'jvod_finished_at',
        :'jvod_duration_s' => :'jvod_duration_s',
        :'jvod_reported_duration_s' => :'jvod_reported_duration_s',
        :'jvod_region' => :'jvod_region',
        :'user_id' => :'user_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'jvod_id' => :'String',
        :'label' => :'String',
        :'job_id' => :'String',
        :'jvod_state' => :'String',
        :'jvod_type' => :'String',
        :'jvod_url' => :'String',
        :'jvod_created_at' => :'Integer',
        :'jvod_last_state_change_at' => :'Integer',
        :'jvod_finished_at' => :'Integer',
        :'jvod_duration_s' => :'Integer',
        :'jvod_reported_duration_s' => :'Integer',
        :'jvod_region' => :'String',
        :'user_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'jvod_id')
        self.jvod_id = attributes[:'jvod_id']
      end

      if attributes.has_key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.has_key?(:'job_id')
        self.job_id = attributes[:'job_id']
      end

      if attributes.has_key?(:'jvod_state')
        self.jvod_state = attributes[:'jvod_state']
      end

      if attributes.has_key?(:'jvod_type')
        self.jvod_type = attributes[:'jvod_type']
      end

      if attributes.has_key?(:'jvod_url')
        self.jvod_url = attributes[:'jvod_url']
      end

      if attributes.has_key?(:'jvod_created_at')
        self.jvod_created_at = attributes[:'jvod_created_at']
      end

      if attributes.has_key?(:'jvod_last_state_change_at')
        self.jvod_last_state_change_at = attributes[:'jvod_last_state_change_at']
      end

      if attributes.has_key?(:'jvod_finished_at')
        self.jvod_finished_at = attributes[:'jvod_finished_at']
      end

      if attributes.has_key?(:'jvod_duration_s')
        self.jvod_duration_s = attributes[:'jvod_duration_s']
      end

      if attributes.has_key?(:'jvod_reported_duration_s')
        self.jvod_reported_duration_s = attributes[:'jvod_reported_duration_s']
      end

      if attributes.has_key?(:'jvod_region')
        self.jvod_region = attributes[:'jvod_region']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @jvod_id.nil?
        invalid_properties.push('invalid value for "jvod_id", jvod_id cannot be nil.')
      end

      if @label.nil?
        invalid_properties.push('invalid value for "label", label cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @jvod_id.nil?
      return false if @label.nil?
      jvod_state_validator = EnumAttributeValidator.new('String', ['error', 'waiting', 'waiting_finish_live', 'processing', 'cancelling', 'cancelled', 'finished', 'failed', 'creating_asset'])
      return false unless jvod_state_validator.valid?(@jvod_state)
      jvod_type_validator = EnumAttributeValidator.new('String', ['s3', 'ftp', 'instant', 'error'])
      return false unless jvod_type_validator.valid?(@jvod_type)
      jvod_region_validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      return false unless jvod_region_validator.valid?(@jvod_region)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jvod_state Object to be assigned
    def jvod_state=(jvod_state)
      validator = EnumAttributeValidator.new('String', ['error', 'waiting', 'waiting_finish_live', 'processing', 'cancelling', 'cancelled', 'finished', 'failed', 'creating_asset'])
      unless validator.valid?(jvod_state)
        fail ArgumentError, 'invalid value for "jvod_state", must be one of #{validator.allowable_values}.'
      end
      @jvod_state = jvod_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jvod_type Object to be assigned
    def jvod_type=(jvod_type)
      validator = EnumAttributeValidator.new('String', ['s3', 'ftp', 'instant', 'error'])
      unless validator.valid?(jvod_type)
        fail ArgumentError, 'invalid value for "jvod_type", must be one of #{validator.allowable_values}.'
      end
      @jvod_type = jvod_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] jvod_region Object to be assigned
    def jvod_region=(jvod_region)
      validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      unless validator.valid?(jvod_region)
        fail ArgumentError, 'invalid value for "jvod_region", must be one of #{validator.allowable_values}.'
      end
      @jvod_region = jvod_region
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          jvod_id == o.jvod_id &&
          label == o.label &&
          job_id == o.job_id &&
          jvod_state == o.jvod_state &&
          jvod_type == o.jvod_type &&
          jvod_url == o.jvod_url &&
          jvod_created_at == o.jvod_created_at &&
          jvod_last_state_change_at == o.jvod_last_state_change_at &&
          jvod_finished_at == o.jvod_finished_at &&
          jvod_duration_s == o.jvod_duration_s &&
          jvod_reported_duration_s == o.jvod_reported_duration_s &&
          jvod_region == o.jvod_region &&
          user_id == o.user_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [jvod_id, label, job_id, jvod_state, jvod_type, jvod_url, jvod_created_at, jvod_last_state_change_at, jvod_finished_at, jvod_duration_s, jvod_reported_duration_s, jvod_region, user_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BrightcoveLive.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
