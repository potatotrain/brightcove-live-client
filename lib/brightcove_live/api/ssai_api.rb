=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'uri'

module BrightcoveLive
  class SSAIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create_Ad_Configuration
    # Create a configuration for server-side ad application. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_ad_configurationbody Create a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def create_ad_configuration(content_type, x_api_key, create_ad_configurationbody, opts = {})
      data, _status_code, _headers = create_ad_configuration_with_http_info(content_type, x_api_key, create_ad_configurationbody, opts)
      data
    end

    # Create_Ad_Configuration
    # Create a configuration for server-side ad application. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_ad_configurationbody Create a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Fixnum, Hash)>] Application data, response status code and response headers
    def create_ad_configuration_with_http_info(content_type, x_api_key, create_ad_configurationbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.create_ad_configuration ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.create_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.create_ad_configuration"
      end
      # verify the required parameter 'create_ad_configurationbody' is set
      if @api_client.config.client_side_validation && create_ad_configurationbody.nil?
        fail ArgumentError, "Missing the required parameter 'create_ad_configurationbody' when calling SSAIApi.create_ad_configuration"
      end
      # resource path
      local_var_path = '/v1/ssai/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_ad_configurationbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#create_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create_beacon_set
    # Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_beacon_setbody Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def create_beacon_set(content_type, x_api_key, create_beacon_setbody, opts = {})
      data, _status_code, _headers = create_beacon_set_with_http_info(content_type, x_api_key, create_beacon_setbody, opts)
      data
    end

    # Create_beacon_set
    # Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_beacon_setbody Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Fixnum, Hash)>] BeaconSet data, response status code and response headers
    def create_beacon_set_with_http_info(content_type, x_api_key, create_beacon_setbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.create_beacon_set ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.create_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.create_beacon_set"
      end
      # verify the required parameter 'create_beacon_setbody' is set
      if @api_client.config.client_side_validation && create_beacon_setbody.nil?
        fail ArgumentError, "Missing the required parameter 'create_beacon_setbody' when calling SSAIApi.create_beacon_set"
      end
      # resource path
      local_var_path = '/v1/ssai/beaconsets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_beacon_setbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeaconSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#create_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete_Ad_Configuration
    # Delete an ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [DeleteAdConfiguration200]
    def delete_ad_configuration(application_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts)
      data
    end

    # Delete_Ad_Configuration
    # Delete an ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteAdConfiguration200, Fixnum, Hash)>] DeleteAdConfiguration200 data, response status code and response headers
    def delete_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.delete_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_ad_configuration"
      end
      # resource path
      local_var_path = '/v1/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteAdConfiguration200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete_beacon_set
    # Deletes a beacon set. 
    # @param beacon_set_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [DeleteBeaconSet200]
    def delete_beacon_set(beacon_set_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, opts)
      data
    end

    # Delete_beacon_set
    # Deletes a beacon set. 
    # @param beacon_set_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteBeaconSet200, Fixnum, Hash)>] DeleteBeaconSet200 data, response status code and response headers
    def delete_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_beacon_set ...'
      end
      # verify the required parameter 'beacon_set_id' is set
      if @api_client.config.client_side_validation && beacon_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'beacon_set_id' when calling SSAIApi.delete_beacon_set"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_beacon_set"
      end
      # resource path
      local_var_path = '/v1/ssai/beaconsets/beaconset/beacon_set_id'.sub('{' + 'beacon_set_id' + '}', beacon_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteBeaconSet200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete_Slate_Media_Source_Asset
    # Delete Slate Media Source Asset. 
    # @param slate_msa_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [DeleteSlateMediaSourceAsset200]
    def delete_slate_media_source_asset(slate_msa_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_slate_media_source_asset_with_http_info(slate_msa_id, content_type, x_api_key, opts)
      data
    end

    # Delete_Slate_Media_Source_Asset
    # Delete Slate Media Source Asset. 
    # @param slate_msa_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteSlateMediaSourceAsset200, Fixnum, Hash)>] DeleteSlateMediaSourceAsset200 data, response status code and response headers
    def delete_slate_media_source_asset_with_http_info(slate_msa_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_slate_media_source_asset ...'
      end
      # verify the required parameter 'slate_msa_id' is set
      if @api_client.config.client_side_validation && slate_msa_id.nil?
        fail ArgumentError, "Missing the required parameter 'slate_msa_id' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # resource path
      local_var_path = '/v1/ssai/slates/slate{slate_msa_id}'.sub('{' + 'slate_msa_id' + '}', slate_msa_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DeleteSlateMediaSourceAsset200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_slate_media_source_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_Account_Ad_Configurations
    # Get ad applications for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def get_account_ad_configurations(account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_account_ad_configurations_with_http_info(account_id, content_type, x_api_key, opts)
      data
    end

    # Get_Account_Ad_Configurations
    # Get ad applications for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Fixnum, Hash)>] Application data, response status code and response headers
    def get_account_ad_configurations_with_http_info(account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_account_ad_configurations ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SSAIApi.get_account_ad_configurations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_account_ad_configurations"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_account_ad_configurations"
      end
      # resource path
      local_var_path = '/v1/ssai/applications/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_account_ad_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_Ad_Configuration
    # Get an ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def get_ad_configuration(application_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts)
      data
    end

    # Get_Ad_Configuration
    # Get an ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Fixnum, Hash)>] Application data, response status code and response headers
    def get_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.get_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_ad_configuration"
      end
      # resource path
      local_var_path = '/v1/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_beacon_sets
    # Get all beacon sets for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def get_beacon_sets(account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_beacon_sets_with_http_info(account_id, content_type, x_api_key, opts)
      data
    end

    # Get_beacon_sets
    # Get all beacon sets for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Fixnum, Hash)>] BeaconSet data, response status code and response headers
    def get_beacon_sets_with_http_info(account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_beacon_sets ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SSAIApi.get_beacon_sets"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_beacon_sets"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_beacon_sets"
      end
      # resource path
      local_var_path = '/v1/ssai/beaconsets/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeaconSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_beacon_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_beacon_sets_for_user
    # Get all beacon sets for the requesting user. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def get_beacon_sets_for_user(content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_beacon_sets_for_user_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get_beacon_sets_for_user
    # Get all beacon sets for the requesting user. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Fixnum, Hash)>] BeaconSet data, response status code and response headers
    def get_beacon_sets_for_user_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_beacon_sets_for_user ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_beacon_sets_for_user"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_beacon_sets_for_user"
      end
      # resource path
      local_var_path = '/v1/ssai/beaconsets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeaconSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_beacon_sets_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_slates_for_account
    # Get all beacon sets for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [GetSlateMediaSourceAssets200]
    def get_slates_for_account(account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_slates_for_account_with_http_info(account_id, content_type, x_api_key, opts)
      data
    end

    # Get_slates_for_account
    # Get all beacon sets for an account. 
    # @param account_id Live account ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSlateMediaSourceAssets200, Fixnum, Hash)>] GetSlateMediaSourceAssets200 data, response status code and response headers
    def get_slates_for_account_with_http_info(account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_slates_for_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SSAIApi.get_slates_for_account"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_slates_for_account"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_slates_for_account"
      end
      # resource path
      local_var_path = '/v1/ssai/slates/account/{account_id}'.sub('{' + 'account_id' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSlateMediaSourceAssets200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_slates_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_User_Slate_Media_Source_Assets
    # Get Slate Media Source Assets for the current user. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [GetSlateMediaSourceAssets200]
    def get_user_slate_media_source_assets(content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_user_slate_media_source_assets_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get_User_Slate_Media_Source_Assets
    # Get Slate Media Source Assets for the current user. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSlateMediaSourceAssets200, Fixnum, Hash)>] GetSlateMediaSourceAssets200 data, response status code and response headers
    def get_user_slate_media_source_assets_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_user_slate_media_source_assets ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_user_slate_media_source_assets"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_user_slate_media_source_assets"
      end
      # resource path
      local_var_path = '/v1/ssai/slates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetSlateMediaSourceAssets200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_user_slate_media_source_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get_Ad_Configurations
    # Get ad applications for the current user.
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def getuser_ad_configurations(content_type, x_api_key, opts = {})
      data, _status_code, _headers = getuser_ad_configurations_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get_Ad_Configurations
    # Get ad applications for the current user.
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Fixnum, Hash)>] Application data, response status code and response headers
    def getuser_ad_configurations_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.getuser_ad_configurations ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.getuser_ad_configurations"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.getuser_ad_configurations"
      end
      # resource path
      local_var_path = '/v1/ssai/applications'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#getuser_ad_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ingest_Slate_Media_Source_Asset
    # Ingest Slate Media Source Asset. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param ingest_slate_media_source_assetbody Ingest Slate Media Source Asset.
    # @param [Hash] opts the optional parameters
    # @return [IngestSlateMediaSourceAsset200]
    def ingest_slate_media_source_asset(content_type, x_api_key, ingest_slate_media_source_assetbody, opts = {})
      data, _status_code, _headers = ingest_slate_media_source_asset_with_http_info(content_type, x_api_key, ingest_slate_media_source_assetbody, opts)
      data
    end

    # Ingest_Slate_Media_Source_Asset
    # Ingest Slate Media Source Asset. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param ingest_slate_media_source_assetbody Ingest Slate Media Source Asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IngestSlateMediaSourceAsset200, Fixnum, Hash)>] IngestSlateMediaSourceAsset200 data, response status code and response headers
    def ingest_slate_media_source_asset_with_http_info(content_type, x_api_key, ingest_slate_media_source_assetbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.ingest_slate_media_source_asset ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # verify the required parameter 'ingest_slate_media_source_assetbody' is set
      if @api_client.config.client_side_validation && ingest_slate_media_source_assetbody.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_slate_media_source_assetbody' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # resource path
      local_var_path = '/v1/ssai/slates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(ingest_slate_media_source_assetbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IngestSlateMediaSourceAsset200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#ingest_slate_media_source_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update_Ad_Configuration
    # Update a configuration for server-side ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_ad_configurationbody Update a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def update_ad_configuration(application_id, content_type, x_api_key, update_ad_configurationbody, opts = {})
      data, _status_code, _headers = update_ad_configuration_with_http_info(application_id, content_type, x_api_key, update_ad_configurationbody, opts)
      data
    end

    # Update_Ad_Configuration
    # Update a configuration for server-side ad application. 
    # @param application_id The ad application id
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_ad_configurationbody Update a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Fixnum, Hash)>] Application data, response status code and response headers
    def update_ad_configuration_with_http_info(application_id, content_type, x_api_key, update_ad_configurationbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.update_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'update_ad_configurationbody' is set
      if @api_client.config.client_side_validation && update_ad_configurationbody.nil?
        fail ArgumentError, "Missing the required parameter 'update_ad_configurationbody' when calling SSAIApi.update_ad_configuration"
      end
      # resource path
      local_var_path = '/v1/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_ad_configurationbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#update_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update_beacon_set
    # Updates a beacon set. 
    # @param beacon_set_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_beacon_setbody Updates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def update_beacon_set(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts = {})
      data, _status_code, _headers = update_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts)
      data
    end

    # Update_beacon_set
    # Updates a beacon set. 
    # @param beacon_set_id A slate media asset ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_beacon_setbody Updates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Fixnum, Hash)>] BeaconSet data, response status code and response headers
    def update_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.update_beacon_set ...'
      end
      # verify the required parameter 'beacon_set_id' is set
      if @api_client.config.client_side_validation && beacon_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'beacon_set_id' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'update_beacon_setbody' is set
      if @api_client.config.client_side_validation && update_beacon_setbody.nil?
        fail ArgumentError, "Missing the required parameter 'update_beacon_setbody' when calling SSAIApi.update_beacon_set"
      end
      # resource path
      local_var_path = '/v1/ssai/beaconsets/beaconset/beacon_set_id'.sub('{' + 'beacon_set_id' + '}', beacon_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_beacon_setbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BeaconSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#update_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
