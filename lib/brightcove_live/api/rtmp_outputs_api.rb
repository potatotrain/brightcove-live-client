=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module BrightcoveLive
  class RTMPOutputsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create RTMP Output
    # Create an RTMP output. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_rtmp_output_request_body [CreateRTMPOutputRequestBody] Create an RTMP output request body
    # @param [Hash] opts the optional parameters
    # @return [CreateRTMPOutputResponse]
    def create_rtmp_output(job_id, x_api_key, create_rtmp_output_request_body, opts = {})
      data, _status_code, _headers = create_rtmp_output_with_http_info(job_id, x_api_key, create_rtmp_output_request_body, opts)
      data
    end

    # Create RTMP Output
    # Create an RTMP output. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_rtmp_output_request_body [CreateRTMPOutputRequestBody] Create an RTMP output request body
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRTMPOutputResponse, Integer, Hash)>] CreateRTMPOutputResponse data, response status code and response headers
    def create_rtmp_output_with_http_info(job_id, x_api_key, create_rtmp_output_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RTMPOutputsApi.create_rtmp_output ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling RTMPOutputsApi.create_rtmp_output"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling RTMPOutputsApi.create_rtmp_output"
      end
      # verify the required parameter 'create_rtmp_output_request_body' is set
      if @api_client.config.client_side_validation && create_rtmp_output_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_rtmp_output_request_body' when calling RTMPOutputsApi.create_rtmp_output"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/rtmpouts'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_rtmp_output_request_body) 

      # return_type
      return_type = opts[:return_type] || 'CreateRTMPOutputResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RTMPOutputsApi#create_rtmp_output\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List RTMP Outputs
    # Get a list of RTMP outputs. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<RTMPout>]
    def get_rtmp_outputs(job_id, x_api_key, opts = {})
      data, _status_code, _headers = get_rtmp_outputs_with_http_info(job_id, x_api_key, opts)
      data
    end

    # List RTMP Outputs
    # Get a list of RTMP outputs. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RTMPout>, Integer, Hash)>] Array<RTMPout> data, response status code and response headers
    def get_rtmp_outputs_with_http_info(job_id, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RTMPOutputsApi.get_rtmp_outputs ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling RTMPOutputsApi.get_rtmp_outputs"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling RTMPOutputsApi.get_rtmp_outputs"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/rtmpouts'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<RTMPout>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RTMPOutputsApi#get_rtmp_outputs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop RTMP Output
    # Stop an RTMP output. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param rtmp_out_id [String] RTMP output ID
    # @param [Hash] opts the optional parameters
    # @return [StopRTMPOutputResponse]
    def stop_rtmp_output(job_id, x_api_key, rtmp_out_id, opts = {})
      data, _status_code, _headers = stop_rtmp_output_with_http_info(job_id, x_api_key, rtmp_out_id, opts)
      data
    end

    # Stop RTMP Output
    # Stop an RTMP output. See [Live API: RTMP Outputs](https://support.brightcove.com/live-api-rtmp-outputs) for more information on RTMP outputs.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param rtmp_out_id [String] RTMP output ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopRTMPOutputResponse, Integer, Hash)>] StopRTMPOutputResponse data, response status code and response headers
    def stop_rtmp_output_with_http_info(job_id, x_api_key, rtmp_out_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RTMPOutputsApi.stop_rtmp_output ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling RTMPOutputsApi.stop_rtmp_output"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling RTMPOutputsApi.stop_rtmp_output"
      end
      # verify the required parameter 'rtmp_out_id' is set
      if @api_client.config.client_side_validation && rtmp_out_id.nil?
        fail ArgumentError, "Missing the required parameter 'rtmp_out_id' when calling RTMPOutputsApi.stop_rtmp_output"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/rtmpouts/{rtmp_out_id}/stop'.sub('{' + 'job_id' + '}', job_id.to_s).sub('{' + 'rtmp_out_id' + '}', rtmp_out_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StopRTMPOutputResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RTMPOutputsApi#stop_rtmp_output\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
