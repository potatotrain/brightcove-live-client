=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'date'

module OpenapiClient
  class Job
    # The Amazon AWS region to use for encoding the job
    attr_accessor :region

    # The time, in seconds, that the system will wait for a stream to reconnect to the encoder
    attr_accessor :reconnect_time

    # Used to preset and define an end time for the live event. At any point within the specified event_length you may reconnect to your stream. The event_length setting goes into effect as soon as streaming begins.
    attr_accessor :event_length

    # Indicates whether this is a live stream or VOD
    attr_accessor :live_stream

    # Indicates whether SSAI is enabled
    attr_accessor :ad_insertion

    attr_accessor :input_media_file

    # id for a slate of assets included
    attr_accessor :slate

    attr_accessor :stream

    # Array of objects containing properties for the output media files
    attr_accessor :output_media_files

    # ISO 8601 date-time string representing when the job was created
    attr_accessor :created_at

    # ISO 8601 date-time string representing when the live stream was stopped
    attr_accessor :finished_at

    # The live job id
    attr_accessor :id

    # The current state of the job - possible values for Live jobs are standby, waiting, processing, disconnected. finishing, finished, cancelling, cancelled, failed; possible values for VOD jobs are waiting_finish_live, waiting, processing, creating_asset, cancelling, cancelled, finished, failed
    attr_accessor :state

    # ISO 8601 date-time string representing when the job was submitted
    attr_accessor :submitted_at

    # ISO 8601 date-time string representing when the job was last modified
    attr_accessor :updated_at

    # Playback URL for the live stream
    attr_accessor :playback_url

    # Playback URL for the live DVR
    attr_accessor :playback_url_dvr

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'region' => :'region',
        :'reconnect_time' => :'reconnect_time',
        :'event_length' => :'event_length',
        :'live_stream' => :'live_stream',
        :'ad_insertion' => :'ad_insertion',
        :'input_media_file' => :'input_media_file',
        :'slate' => :'slate',
        :'stream' => :'stream',
        :'output_media_files' => :'output_media_files',
        :'created_at' => :'created_at',
        :'finished_at' => :'finished_at',
        :'id' => :'id',
        :'state' => :'state',
        :'submitted_at' => :'submitted_at',
        :'updated_at' => :'updated_at',
        :'playback_url' => :'playback_url',
        :'playback_url_dvr' => :'playback_url_dvr'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'region' => :'String',
        :'reconnect_time' => :'Float',
        :'event_length' => :'Float',
        :'live_stream' => :'BOOLEAN',
        :'ad_insertion' => :'BOOLEAN',
        :'input_media_file' => :'JobInputMediaFile',
        :'slate' => :'String',
        :'stream' => :'JobStream',
        :'output_media_files' => :'Array<JobOutputMediaFiles>',
        :'created_at' => :'String',
        :'finished_at' => :'String',
        :'id' => :'String',
        :'state' => :'String',
        :'submitted_at' => :'String',
        :'updated_at' => :'String',
        :'playback_url' => :'String',
        :'playback_url_dvr' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'reconnect_time')
        self.reconnect_time = attributes[:'reconnect_time']
      end

      if attributes.has_key?(:'event_length')
        self.event_length = attributes[:'event_length']
      end

      if attributes.has_key?(:'live_stream')
        self.live_stream = attributes[:'live_stream']
      end

      if attributes.has_key?(:'ad_insertion')
        self.ad_insertion = attributes[:'ad_insertion']
      end

      if attributes.has_key?(:'input_media_file')
        self.input_media_file = attributes[:'input_media_file']
      end

      if attributes.has_key?(:'slate')
        self.slate = attributes[:'slate']
      end

      if attributes.has_key?(:'stream')
        self.stream = attributes[:'stream']
      end

      if attributes.has_key?(:'output_media_files')
        if (value = attributes[:'output_media_files']).is_a?(Array)
          self.output_media_files = value
        end
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'submitted_at')
        self.submitted_at = attributes[:'submitted_at']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'playback_url')
        self.playback_url = attributes[:'playback_url']
      end

      if attributes.has_key?(:'playback_url_dvr')
        self.playback_url_dvr = attributes[:'playback_url_dvr']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if @reconnect_time.nil?
        invalid_properties.push('invalid value for "reconnect_time", reconnect_time cannot be nil.')
      end

      if @event_length.nil?
        invalid_properties.push('invalid value for "event_length", event_length cannot be nil.')
      end

      if @live_stream.nil?
        invalid_properties.push('invalid value for "live_stream", live_stream cannot be nil.')
      end

      if @ad_insertion.nil?
        invalid_properties.push('invalid value for "ad_insertion", ad_insertion cannot be nil.')
      end

      if @input_media_file.nil?
        invalid_properties.push('invalid value for "input_media_file", input_media_file cannot be nil.')
      end

      if @slate.nil?
        invalid_properties.push('invalid value for "slate", slate cannot be nil.')
      end

      if @stream.nil?
        invalid_properties.push('invalid value for "stream", stream cannot be nil.')
      end

      if @output_media_files.nil?
        invalid_properties.push('invalid value for "output_media_files", output_media_files cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @region.nil?
      region_validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      return false unless region_validator.valid?(@region)
      return false if @reconnect_time.nil?
      return false if @event_length.nil?
      return false if @live_stream.nil?
      return false if @ad_insertion.nil?
      return false if @input_media_file.nil?
      return false if @slate.nil?
      return false if @stream.nil?
      return false if @output_media_files.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(region)
      validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      unless validator.valid?(region)
        fail ArgumentError, 'invalid value for "region", must be one of #{validator.allowable_values}.'
      end
      @region = region
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          region == o.region &&
          reconnect_time == o.reconnect_time &&
          event_length == o.event_length &&
          live_stream == o.live_stream &&
          ad_insertion == o.ad_insertion &&
          input_media_file == o.input_media_file &&
          slate == o.slate &&
          stream == o.stream &&
          output_media_files == o.output_media_files &&
          created_at == o.created_at &&
          finished_at == o.finished_at &&
          id == o.id &&
          state == o.state &&
          submitted_at == o.submitted_at &&
          updated_at == o.updated_at &&
          playback_url == o.playback_url &&
          playback_url_dvr == o.playback_url_dvr
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [region, reconnect_time, event_length, live_stream, ad_insertion, input_media_file, slate, stream, output_media_files, created_at, finished_at, id, state, submitted_at, updated_at, playback_url, playback_url_dvr].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
