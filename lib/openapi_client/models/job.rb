=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module OpenapiClient
  class Job
    # Indicates whether SSAI is enabled
    attr_accessor :ad_insertion

    # ISO 8601 date-time string representing when the job was created
    attr_accessor :created_at

    # Used to preset and define an end time for the live event. At any point within the specified event_length you may reconnect to your stream. The event_length setting goes into effect as soon as streaming begins.
    attr_accessor :event_length

    # ISO 8601 date-time string representing when the live stream was stopped
    attr_accessor :finished_at

    # The live job id
    attr_accessor :id

    attr_accessor :input_media_file

    # Indicates whether this is a live stream or VOD
    attr_accessor :live_stream

    # Array of objects containing properties for the output media files
    attr_accessor :output_media_files

    # Playback URL for the live stream
    attr_accessor :playback_url

    # Playback URL for the live DVR
    attr_accessor :playback_url_dvr

    # The time, in seconds, that the system will wait for a stream to reconnect to the encoder
    attr_accessor :reconnect_time

    # The Amazon AWS region to use for encoding the job
    attr_accessor :region

    # If true, HLS segments will be scrambled to prevent your stream from being stolen and reused
    attr_accessor :randomize_chunk_url

    # '[RTMP outputs](https://support.brightcove.com/live-api-rtmp-outputs) for the job'
    attr_accessor :rtmp_outputs

    # id for a slate of assets included
    attr_accessor :slate

    # The current state of the job. Possible values for **Live jobs** are:   - `error` (An error has occurred; the job will not be processed.)   - `standby` ([Only applicable to Static Entry Point jobs.; The job is allocated and ready for activation.)   - `waiting` (The job has been assigned to a streaming worker and ready for the encoder to connect.)   - `processing` (The encoder is connected and the job is available for playback.)   - `disconnected` (The encoder has disconnected and the streaming worker is waiting for a reconnection.)   - `finishing` (The encoder has been disconnected for more than `reconnect_time`, and streaming worker is stopping the jobs and creating any associated VOD outputs.)   - `finished` (The job has finished successfully.)   - `cancelling` (The job has been cancelled and the worker is stopping the job and will NOT process any pending VOD outputs.)   - `cancelled` (The job has been cancelled successfully.)   - `failed` (The job has stopped as a result of a system error.)
    attr_accessor :state

    # Current state of an SEP job.  Possible states:   * `none` (not an SEP job)   * `ready` (The entry point has been activated and ready for the encoder to connect)   * `pending_activation` (The entry point has been queued for streaming worker assignment.)   * `activation_in_progress` (The entry point is updating to route connections to the streaming worker.)   * `pending_deactivation` (The entry point has been queued for cleanup from the streaming worker.)   * `deactivation_in_progress` (The entry point is disconnecting from the streaming worker.)   * `cancelled` (The entry point has been cancelled.)   * `finished` (The entry point has completed successfully.)
    attr_accessor :sep_state

    # Current state of an SSAI job.  Possible states:   * `none` (not an SSAI job)   * `waiting_input` (The streaming worker is waiting for the encoder to connect and provide the stream input information.)   * `start_transcoding` (The encoder has connected and the SSAI slate has been queued for transcoding based on the stream input data and outputs data.)   * `transcoding` (The slate is being transcoded.)   * `error` (The slate could not be downloaded or transcoded.)   * `ready` (The slate has been generated and the job is ready for SSAI playback.) enum:   - none   - waiting_input   - start_transcoding   - transcoding   - error   - ready
    attr_accessor :ssai_state

    # A history of state changes for a job
    attr_accessor :state_history

    attr_accessor :stream

    # ISO 8601 date-time string representing when the job was submitted
    attr_accessor :submitted_at

    # ISO 8601 date-time string representing when the job was last modified
    attr_accessor :updated_at

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ad_insertion' => :'ad_insertion',
        :'created_at' => :'created_at',
        :'event_length' => :'event_length',
        :'finished_at' => :'finished_at',
        :'id' => :'id',
        :'input_media_file' => :'input_media_file',
        :'live_stream' => :'live_stream',
        :'output_media_files' => :'output_media_files',
        :'playback_url' => :'playback_url',
        :'playback_url_dvr' => :'playback_url_dvr',
        :'reconnect_time' => :'reconnect_time',
        :'region' => :'region',
        :'randomize_chunk_url' => :'randomize_chunk_url',
        :'rtmp_outputs' => :'rtmp_outputs',
        :'slate' => :'slate',
        :'state' => :'state',
        :'sep_state' => :'sep_state',
        :'ssai_state' => :'ssai_state',
        :'state_history' => :'state_history',
        :'stream' => :'stream',
        :'submitted_at' => :'submitted_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ad_insertion' => :'Boolean',
        :'created_at' => :'String',
        :'event_length' => :'Float',
        :'finished_at' => :'String',
        :'id' => :'String',
        :'input_media_file' => :'JobInputMediaFile',
        :'live_stream' => :'Boolean',
        :'output_media_files' => :'Array<JobOutputMediaFiles>',
        :'playback_url' => :'String',
        :'playback_url_dvr' => :'String',
        :'reconnect_time' => :'Float',
        :'region' => :'String',
        :'randomize_chunk_url' => :'Boolean',
        :'rtmp_outputs' => :'Array<RTMPout>',
        :'slate' => :'String',
        :'state' => :'String',
        :'sep_state' => :'String',
        :'ssai_state' => :'String',
        :'state_history' => :'Array<JobStateHistory>',
        :'stream' => :'JobStream',
        :'submitted_at' => :'String',
        :'updated_at' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Job` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Job`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ad_insertion')
        self.ad_insertion = attributes[:'ad_insertion']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'event_length')
        self.event_length = attributes[:'event_length']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'input_media_file')
        self.input_media_file = attributes[:'input_media_file']
      end

      if attributes.key?(:'live_stream')
        self.live_stream = attributes[:'live_stream']
      end

      if attributes.key?(:'output_media_files')
        if (value = attributes[:'output_media_files']).is_a?(Array)
          self.output_media_files = value
        end
      end

      if attributes.key?(:'playback_url')
        self.playback_url = attributes[:'playback_url']
      end

      if attributes.key?(:'playback_url_dvr')
        self.playback_url_dvr = attributes[:'playback_url_dvr']
      end

      if attributes.key?(:'reconnect_time')
        self.reconnect_time = attributes[:'reconnect_time']
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.key?(:'randomize_chunk_url')
        self.randomize_chunk_url = attributes[:'randomize_chunk_url']
      else
        self.randomize_chunk_url = true
      end

      if attributes.key?(:'rtmp_outputs')
        if (value = attributes[:'rtmp_outputs']).is_a?(Array)
          self.rtmp_outputs = value
        end
      end

      if attributes.key?(:'slate')
        self.slate = attributes[:'slate']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'sep_state')
        self.sep_state = attributes[:'sep_state']
      end

      if attributes.key?(:'ssai_state')
        self.ssai_state = attributes[:'ssai_state']
      end

      if attributes.key?(:'state_history')
        if (value = attributes[:'state_history']).is_a?(Array)
          self.state_history = value
        end
      end

      if attributes.key?(:'stream')
        self.stream = attributes[:'stream']
      end

      if attributes.key?(:'submitted_at')
        self.submitted_at = attributes[:'submitted_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @ad_insertion.nil?
        invalid_properties.push('invalid value for "ad_insertion", ad_insertion cannot be nil.')
      end

      if @event_length.nil?
        invalid_properties.push('invalid value for "event_length", event_length cannot be nil.')
      end

      if @input_media_file.nil?
        invalid_properties.push('invalid value for "input_media_file", input_media_file cannot be nil.')
      end

      if @live_stream.nil?
        invalid_properties.push('invalid value for "live_stream", live_stream cannot be nil.')
      end

      if @output_media_files.nil?
        invalid_properties.push('invalid value for "output_media_files", output_media_files cannot be nil.')
      end

      if @reconnect_time.nil?
        invalid_properties.push('invalid value for "reconnect_time", reconnect_time cannot be nil.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if @slate.nil?
        invalid_properties.push('invalid value for "slate", slate cannot be nil.')
      end

      if @stream.nil?
        invalid_properties.push('invalid value for "stream", stream cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @ad_insertion.nil?
      return false if @event_length.nil?
      return false if @input_media_file.nil?
      return false if @live_stream.nil?
      return false if @output_media_files.nil?
      return false if @reconnect_time.nil?
      return false if @region.nil?
      region_validator = EnumAttributeValidator.new('String', ["us-west-2", "us-east-1", "ap-southeast-2", "ap-northeast-1", "ap-southeast-1", "eu-central-1", "eu-west-1", "sa-east-1"])
      return false unless region_validator.valid?(@region)
      return false if @slate.nil?
      state_validator = EnumAttributeValidator.new('String', ["standby", "waiting", "processing", "disconnected", "finishing", "finished", "cancelling", "cancelled", "failed", "waiting_finish_live", "creating_asset"])
      return false unless state_validator.valid?(@state)
      sep_state_validator = EnumAttributeValidator.new('String', ["none", "ready", "pending_activation", "activation_in_progress", "pending_deactivation", "deactivation_in_progress", "cancelled", "finished"])
      return false unless sep_state_validator.valid?(@sep_state)
      return false if @stream.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(region)
      validator = EnumAttributeValidator.new('String', ["us-west-2", "us-east-1", "ap-southeast-2", "ap-northeast-1", "ap-southeast-1", "eu-central-1", "eu-west-1", "sa-east-1"])
      unless validator.valid?(region)
        fail ArgumentError, "invalid value for \"region\", must be one of #{validator.allowable_values}."
      end
      @region = region
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["standby", "waiting", "processing", "disconnected", "finishing", "finished", "cancelling", "cancelled", "failed", "waiting_finish_live", "creating_asset"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sep_state Object to be assigned
    def sep_state=(sep_state)
      validator = EnumAttributeValidator.new('String', ["none", "ready", "pending_activation", "activation_in_progress", "pending_deactivation", "deactivation_in_progress", "cancelled", "finished"])
      unless validator.valid?(sep_state)
        fail ArgumentError, "invalid value for \"sep_state\", must be one of #{validator.allowable_values}."
      end
      @sep_state = sep_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ad_insertion == o.ad_insertion &&
          created_at == o.created_at &&
          event_length == o.event_length &&
          finished_at == o.finished_at &&
          id == o.id &&
          input_media_file == o.input_media_file &&
          live_stream == o.live_stream &&
          output_media_files == o.output_media_files &&
          playback_url == o.playback_url &&
          playback_url_dvr == o.playback_url_dvr &&
          reconnect_time == o.reconnect_time &&
          region == o.region &&
          randomize_chunk_url == o.randomize_chunk_url &&
          rtmp_outputs == o.rtmp_outputs &&
          slate == o.slate &&
          state == o.state &&
          sep_state == o.sep_state &&
          ssai_state == o.ssai_state &&
          state_history == o.state_history &&
          stream == o.stream &&
          submitted_at == o.submitted_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ad_insertion, created_at, event_length, finished_at, id, input_media_file, live_stream, output_media_files, playback_url, playback_url_dvr, reconnect_time, region, randomize_chunk_url, rtmp_outputs, slate, state, sep_state, ssai_state, state_history, stream, submitted_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
