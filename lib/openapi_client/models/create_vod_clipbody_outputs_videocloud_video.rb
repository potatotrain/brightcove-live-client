=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module OpenapiClient
  # 'An object containing inputs for Video Cloud video object creation - see the [CMS API Reference](https://brightcovelearning.github.io/Brightcove-API-References/cms-api/v1/doc/swagger.html#operations-Videos-CreateVideo)'
  class CreateVodClipbodyOutputsVideocloudVideo
    # Array of cuepoint objects
    attr_accessor :cue_points

    # An object whose properties are `fieldname`:`value` pairs - be sure to the *internal* name of the field
    attr_accessor :custom_fields

    # Video short description
    attr_accessor :description

    # Use to disable DRM packaging for this video - applies only to DRM-enabled accounts
    attr_accessor :drm_disabled

    # whether the video supports ads
    attr_accessor :economics

    attr_accessor :geo

    # A longer description of the video
    attr_accessor :long_description

    # Title of the video clip
    attr_accessor :name

    # Reference id for the clip - must be unique within the account
    attr_accessor :reference_id

    attr_accessor :schedule

    # Whether the video should be active or inactive
    attr_accessor :state

    # Array of tags for the video - note that  tags are string that may not contain a comma
    attr_accessor :tags

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cue_points' => :'cue_points',
        :'custom_fields' => :'custom_fields',
        :'description' => :'description',
        :'drm_disabled' => :'drm_disabled',
        :'economics' => :'economics',
        :'geo' => :'geo',
        :'long_description' => :'long_description',
        :'name' => :'name',
        :'reference_id' => :'reference_id',
        :'schedule' => :'schedule',
        :'state' => :'state',
        :'tags' => :'tags'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cue_points' => :'Array<CreateVodClipbodyOutputsVideocloudVideoCuePoint>',
        :'custom_fields' => :'Object',
        :'description' => :'String',
        :'drm_disabled' => :'Boolean',
        :'economics' => :'String',
        :'geo' => :'CreateVodClipbodyOutputsVideocloudVideoGeo',
        :'long_description' => :'String',
        :'name' => :'String',
        :'reference_id' => :'String',
        :'schedule' => :'CreateVodClipbodyOutputsVideocloudVideoSchedule',
        :'state' => :'String',
        :'tags' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CreateVodClipbodyOutputsVideocloudVideo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CreateVodClipbodyOutputsVideocloudVideo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cue_points')
        if (value = attributes[:'cue_points']).is_a?(Array)
          self.cue_points = value
        end
      end

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'drm_disabled')
        self.drm_disabled = attributes[:'drm_disabled']
      end

      if attributes.key?(:'economics')
        self.economics = attributes[:'economics']
      end

      if attributes.key?(:'geo')
        self.geo = attributes[:'geo']
      end

      if attributes.key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'schedule')
        self.schedule = attributes[:'schedule']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      economics_validator = EnumAttributeValidator.new('String', ["AD_SUPPORTED", "FREE"])
      return false unless economics_validator.valid?(@economics)
      return false if @name.nil?
      state_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE"])
      return false unless state_validator.valid?(@state)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] economics Object to be assigned
    def economics=(economics)
      validator = EnumAttributeValidator.new('String', ["AD_SUPPORTED", "FREE"])
      unless validator.valid?(economics)
        fail ArgumentError, "invalid value for \"economics\", must be one of #{validator.allowable_values}."
      end
      @economics = economics
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cue_points == o.cue_points &&
          custom_fields == o.custom_fields &&
          description == o.description &&
          drm_disabled == o.drm_disabled &&
          economics == o.economics &&
          geo == o.geo &&
          long_description == o.long_description &&
          name == o.name &&
          reference_id == o.reference_id &&
          schedule == o.schedule &&
          state == o.state &&
          tags == o.tags
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cue_points, custom_fields, description, drm_disabled, economics, geo, long_description, name, reference_id, schedule, state, tags].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
