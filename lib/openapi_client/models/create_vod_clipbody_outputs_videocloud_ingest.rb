=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module OpenapiClient
  # An object containing inputs for Video Cloud video ingestion - see the [Dynamic Ingest Reference](https://brightcovelearning.github.io/Brightcove-API-References/dynamic-ingest-api/v1/doc/swagger.html#operations-Ingest-AccountsVideosIngestRequestsByAccountIdAndVideoIdPost) - do not include the master field, as that information will be provided by the Live API. If no ingest profile is specified, the account default profile will be used.
  class CreateVodClipbodyOutputsVideocloudIngest
    # An array of URLs that notifications for the ingest job should be sent to
    attr_accessor :callbacks

    # 'Whether poster and thumbnail should be captured during transcoding; defaults to `true` if the the profile has image renditions, `false` if it does not - see [Images and the Dynamic Ingest API](https://support.brightcove.com/images-and-dynamic-ingest-api) for more information'
    attr_accessor :capture_images

    # The ingest profile to use - we recommend that you do **not** include this field and use the account default profile instead
    attr_accessor :profile

    # array of audio track objects - see [Implementing Multiple Audio Tracks Using the APIs](https://support.brightcove.com/implementing-multiple-audio-tracks-using-apis) for more information.  **Dynamic Delivery only**
    attr_accessor :audio_tracks

    # array of text_tracks objects - see [Ingesting WebVTT Files (Text Tracks)](https://support.brightcove.com/ingesting-webvtt-files-text-tracks)
    attr_accessor :text_tracks

    attr_accessor :poster

    attr_accessor :thumbnail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'callbacks' => :'callbacks',
        :'capture_images' => :'capture-images',
        :'profile' => :'profile',
        :'audio_tracks' => :'audio_tracks',
        :'text_tracks' => :'text_tracks',
        :'poster' => :'poster',
        :'thumbnail' => :'thumbnail'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'callbacks' => :'Array<String>',
        :'capture_images' => :'Boolean',
        :'profile' => :'String',
        :'audio_tracks' => :'Array<Object>',
        :'text_tracks' => :'Array<Object>',
        :'poster' => :'Object',
        :'thumbnail' => :'Object'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CreateVodClipbodyOutputsVideocloudIngest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CreateVodClipbodyOutputsVideocloudIngest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'callbacks')
        if (value = attributes[:'callbacks']).is_a?(Array)
          self.callbacks = value
        end
      end

      if attributes.key?(:'capture_images')
        self.capture_images = attributes[:'capture_images']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.key?(:'audio_tracks')
        if (value = attributes[:'audio_tracks']).is_a?(Array)
          self.audio_tracks = value
        end
      end

      if attributes.key?(:'text_tracks')
        if (value = attributes[:'text_tracks']).is_a?(Array)
          self.text_tracks = value
        end
      end

      if attributes.key?(:'poster')
        self.poster = attributes[:'poster']
      end

      if attributes.key?(:'thumbnail')
        self.thumbnail = attributes[:'thumbnail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          callbacks == o.callbacks &&
          capture_images == o.capture_images &&
          profile == o.profile &&
          audio_tracks == o.audio_tracks &&
          text_tracks == o.text_tracks &&
          poster == o.poster &&
          thumbnail == o.thumbnail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [callbacks, capture_images, profile, audio_tracks, text_tracks, poster, thumbnail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
