=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'date'

module OpenapiClient
  class CreateALiveJobbody
    # Indicates that the job is a live streaming job.
    attr_accessor :live_stream

    # AWS region - you can also specify region as the alias for a list set up for the account by Brightcove Support. See [Supported AWS Regions] (https://support.brightcove.com/overview-brightcove-live-api#Support_aws_regions) for more details on the support in each region.
    attr_accessor :region

    # Array of IP addresses white-listed for RTMP delivery
    attr_accessor :rtmp_ip_whitelist

    # Indicates whether the job should be billed as `event` hours or a channel (`24x7`) - see [Channels and Event Hours](https://support.brightcove.com/overview-brightcove-live-api#Channels_and_hours).
    attr_accessor :channel_type

    # Whether an `EXT-X-ENDLIST` tag should be added to the stream playlist when you stop the stream or the `reconnect_time` window has been reached. The `EXT-X-ENDLIST` tag indicates that no more Media Segments will be added to the Media Playlist file and helps prevent the player from displaying error messages when the stream stops.
    attr_accessor :hls_endlist

    # Array of output specifications for live and VOD assets to be created from the live stream.
    attr_accessor :outputs

    # Setting this parameter to true will enable server side ad insertion (SSAI) on the job. Current support includes, DFP, Freewheel, or any VAST 2.0/3.0 ad tags.
    attr_accessor :ad_insertion

    # Adjust the loudness level of the audio. This is measured in LUFS and specified in dB. This is useful to set the output loudness level to conform to a standard (-23dB for EBU R.128) The recommended setting is -23.
    attr_accessor :ad_audio_loudness_level

    # ID for a beacon set (for SSAI only).
    attr_accessor :beacon_set

    # The time, in seconds, to wait for a stream to reconnect to the encoder. If the reconnect time passes without the stream reconnecting, the job will automatically finish.
    attr_accessor :reconnect_time

    # Id for a set of slate assets
    attr_accessor :slate

    # Whether this is a static entry point (SEP) job
    attr_accessor :static

    attr_accessor :encryption

    # Used to preset and define an end time for the live event. At any point within the specified `event_length` you may reconnect to your stream. The `event_length` setting goes into effect as soon as streaming begins.
    attr_accessor :event_length

    # The time, in seconds, to keep in the live DVR manifest. If the stream duration is longer than the window duration, segment references will be removed first in first out. Default is 100 seconds. **Note: for SSAI jobs, the limit is `7200`.
    attr_accessor :live_dvr_sliding_window_duration

    # The time, in seconds, to keep in the live DVR manifest. If the stream duration is longer than the window duration, segment references will be removed first in first out. Default is `100` seconds.
    attr_accessor :live_dvr_ads_window_duration

    # Sets the maximum HLS protocol version to use. Special features will be used as available. Default is `3`.
    attr_accessor :max_hls_protocol_version

    # Array of notification destination objects or strings - notifications defined here are for job-level events.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object. See [Events](https://support.brightcove.com/live-api-notifications#Events) for an explanation of the events reported in `state_changed` notifications.
    attr_accessor :notifications

    # Array of additional CDN providers to be used for manifest generation. For each CDN provided, the manifest will be prepended accordingly
    attr_accessor :add_cdns

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'live_stream' => :'live_stream',
        :'region' => :'region',
        :'rtmp_ip_whitelist' => :'rtmp_ip_whitelist',
        :'channel_type' => :'channel_type',
        :'hls_endlist' => :'hls_endlist',
        :'outputs' => :'outputs',
        :'ad_insertion' => :'ad_insertion',
        :'ad_audio_loudness_level' => :'ad_audio_loudness_level',
        :'beacon_set' => :'beacon_set',
        :'reconnect_time' => :'reconnect_time',
        :'slate' => :'slate',
        :'static' => :'static',
        :'encryption' => :'encryption',
        :'event_length' => :'event_length',
        :'live_dvr_sliding_window_duration' => :'live_dvr_sliding_window_duration',
        :'live_dvr_ads_window_duration' => :'live_dvr_ads_window_duration',
        :'max_hls_protocol_version' => :'max_hls_protocol_version',
        :'notifications' => :'notifications',
        :'add_cdns' => :'add_cdns'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'live_stream' => :'BOOLEAN',
        :'region' => :'String',
        :'rtmp_ip_whitelist' => :'Array<String>',
        :'channel_type' => :'String',
        :'hls_endlist' => :'BOOLEAN',
        :'outputs' => :'Array<CreateALiveJobbodyOutputs>',
        :'ad_insertion' => :'BOOLEAN',
        :'ad_audio_loudness_level' => :'Float',
        :'beacon_set' => :'String',
        :'reconnect_time' => :'Integer',
        :'slate' => :'String',
        :'static' => :'BOOLEAN',
        :'encryption' => :'CreateALiveJobbodyEncryption',
        :'event_length' => :'Integer',
        :'live_dvr_sliding_window_duration' => :'Integer',
        :'live_dvr_ads_window_duration' => :'Integer',
        :'max_hls_protocol_version' => :'Integer',
        :'notifications' => :'Array<Object>',
        :'add_cdns' => :'Array<CreateALiveJobbodyAddCdns>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'live_stream')
        self.live_stream = attributes[:'live_stream']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'rtmp_ip_whitelist')
        if (value = attributes[:'rtmp_ip_whitelist']).is_a?(Array)
          self.rtmp_ip_whitelist = value
        end
      end

      if attributes.has_key?(:'channel_type')
        self.channel_type = attributes[:'channel_type']
      else
        self.channel_type = 'event'
      end

      if attributes.has_key?(:'hls_endlist')
        self.hls_endlist = attributes[:'hls_endlist']
      else
        self.hls_endlist = true
      end

      if attributes.has_key?(:'outputs')
        if (value = attributes[:'outputs']).is_a?(Array)
          self.outputs = value
        end
      end

      if attributes.has_key?(:'ad_insertion')
        self.ad_insertion = attributes[:'ad_insertion']
      else
        self.ad_insertion = false
      end

      if attributes.has_key?(:'ad_audio_loudness_level')
        self.ad_audio_loudness_level = attributes[:'ad_audio_loudness_level']
      end

      if attributes.has_key?(:'beacon_set')
        self.beacon_set = attributes[:'beacon_set']
      end

      if attributes.has_key?(:'reconnect_time')
        self.reconnect_time = attributes[:'reconnect_time']
      else
        self.reconnect_time = 30
      end

      if attributes.has_key?(:'slate')
        self.slate = attributes[:'slate']
      end

      if attributes.has_key?(:'static')
        self.static = attributes[:'static']
      else
        self.static = false
      end

      if attributes.has_key?(:'encryption')
        self.encryption = attributes[:'encryption']
      end

      if attributes.has_key?(:'event_length')
        self.event_length = attributes[:'event_length']
      else
        self.event_length = 0
      end

      if attributes.has_key?(:'live_dvr_sliding_window_duration')
        self.live_dvr_sliding_window_duration = attributes[:'live_dvr_sliding_window_duration']
      else
        self.live_dvr_sliding_window_duration = 100
      end

      if attributes.has_key?(:'live_dvr_ads_window_duration')
        self.live_dvr_ads_window_duration = attributes[:'live_dvr_ads_window_duration']
      else
        self.live_dvr_ads_window_duration = 100
      end

      if attributes.has_key?(:'max_hls_protocol_version')
        self.max_hls_protocol_version = attributes[:'max_hls_protocol_version']
      else
        self.max_hls_protocol_version = 3
      end

      if attributes.has_key?(:'notifications')
        if (value = attributes[:'notifications']).is_a?(Array)
          self.notifications = value
        end
      end

      if attributes.has_key?(:'add_cdns')
        if (value = attributes[:'add_cdns']).is_a?(Array)
          self.add_cdns = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @live_stream.nil?
        invalid_properties.push('invalid value for "live_stream", live_stream cannot be nil.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if @outputs.nil?
        invalid_properties.push('invalid value for "outputs", outputs cannot be nil.')
      end

      if !@ad_audio_loudness_level.nil? && @ad_audio_loudness_level > 60
        invalid_properties.push('invalid value for "ad_audio_loudness_level", must be smaller than or equal to 60.')
      end

      if !@ad_audio_loudness_level.nil? && @ad_audio_loudness_level < -60
        invalid_properties.push('invalid value for "ad_audio_loudness_level", must be greater than or equal to -60.')
      end

      if !@reconnect_time.nil? && @reconnect_time > 7200
        invalid_properties.push('invalid value for "reconnect_time", must be smaller than or equal to 7200.')
      end

      if !@reconnect_time.nil? && @reconnect_time < 1
        invalid_properties.push('invalid value for "reconnect_time", must be greater than or equal to 1.')
      end

      if !@event_length.nil? && @event_length > 93600
        invalid_properties.push('invalid value for "event_length", must be smaller than or equal to 93600.')
      end

      if !@event_length.nil? && @event_length < 0
        invalid_properties.push('invalid value for "event_length", must be greater than or equal to 0.')
      end

      if !@live_dvr_sliding_window_duration.nil? && @live_dvr_sliding_window_duration > 86400
        invalid_properties.push('invalid value for "live_dvr_sliding_window_duration", must be smaller than or equal to 86400.')
      end

      if !@live_dvr_sliding_window_duration.nil? && @live_dvr_sliding_window_duration < 0
        invalid_properties.push('invalid value for "live_dvr_sliding_window_duration", must be greater than or equal to 0.')
      end

      if !@live_dvr_ads_window_duration.nil? && @live_dvr_ads_window_duration > 600
        invalid_properties.push('invalid value for "live_dvr_ads_window_duration", must be smaller than or equal to 600.')
      end

      if !@live_dvr_ads_window_duration.nil? && @live_dvr_ads_window_duration < 0
        invalid_properties.push('invalid value for "live_dvr_ads_window_duration", must be greater than or equal to 0.')
      end

      if !@max_hls_protocol_version.nil? && @max_hls_protocol_version > 5
        invalid_properties.push('invalid value for "max_hls_protocol_version", must be smaller than or equal to 5.')
      end

      if !@max_hls_protocol_version.nil? && @max_hls_protocol_version < 1
        invalid_properties.push('invalid value for "max_hls_protocol_version", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @live_stream.nil?
      return false if @region.nil?
      region_validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      return false unless region_validator.valid?(@region)
      channel_type_validator = EnumAttributeValidator.new('String', ['24x7', 'event'])
      return false unless channel_type_validator.valid?(@channel_type)
      return false if @outputs.nil?
      return false if !@ad_audio_loudness_level.nil? && @ad_audio_loudness_level > 60
      return false if !@ad_audio_loudness_level.nil? && @ad_audio_loudness_level < -60
      return false if !@reconnect_time.nil? && @reconnect_time > 7200
      return false if !@reconnect_time.nil? && @reconnect_time < 1
      return false if !@event_length.nil? && @event_length > 93600
      return false if !@event_length.nil? && @event_length < 0
      return false if !@live_dvr_sliding_window_duration.nil? && @live_dvr_sliding_window_duration > 86400
      return false if !@live_dvr_sliding_window_duration.nil? && @live_dvr_sliding_window_duration < 0
      return false if !@live_dvr_ads_window_duration.nil? && @live_dvr_ads_window_duration > 600
      return false if !@live_dvr_ads_window_duration.nil? && @live_dvr_ads_window_duration < 0
      return false if !@max_hls_protocol_version.nil? && @max_hls_protocol_version > 5
      return false if !@max_hls_protocol_version.nil? && @max_hls_protocol_version < 1
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] region Object to be assigned
    def region=(region)
      validator = EnumAttributeValidator.new('String', ['us-west-2', 'us-east-1', 'ap-southeast-2', 'ap-northeast-1', 'ap-southeast-1', 'eu-central-1', 'eu-west-1', 'sa-east-1'])
      unless validator.valid?(region)
        fail ArgumentError, 'invalid value for "region", must be one of #{validator.allowable_values}.'
      end
      @region = region
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] channel_type Object to be assigned
    def channel_type=(channel_type)
      validator = EnumAttributeValidator.new('String', ['24x7', 'event'])
      unless validator.valid?(channel_type)
        fail ArgumentError, 'invalid value for "channel_type", must be one of #{validator.allowable_values}.'
      end
      @channel_type = channel_type
    end

    # Custom attribute writer method with validation
    # @param [Object] ad_audio_loudness_level Value to be assigned
    def ad_audio_loudness_level=(ad_audio_loudness_level)
      if !ad_audio_loudness_level.nil? && ad_audio_loudness_level > 60
        fail ArgumentError, 'invalid value for "ad_audio_loudness_level", must be smaller than or equal to 60.'
      end

      if !ad_audio_loudness_level.nil? && ad_audio_loudness_level < -60
        fail ArgumentError, 'invalid value for "ad_audio_loudness_level", must be greater than or equal to -60.'
      end

      @ad_audio_loudness_level = ad_audio_loudness_level
    end

    # Custom attribute writer method with validation
    # @param [Object] reconnect_time Value to be assigned
    def reconnect_time=(reconnect_time)
      if !reconnect_time.nil? && reconnect_time > 7200
        fail ArgumentError, 'invalid value for "reconnect_time", must be smaller than or equal to 7200.'
      end

      if !reconnect_time.nil? && reconnect_time < 1
        fail ArgumentError, 'invalid value for "reconnect_time", must be greater than or equal to 1.'
      end

      @reconnect_time = reconnect_time
    end

    # Custom attribute writer method with validation
    # @param [Object] event_length Value to be assigned
    def event_length=(event_length)
      if !event_length.nil? && event_length > 93600
        fail ArgumentError, 'invalid value for "event_length", must be smaller than or equal to 93600.'
      end

      if !event_length.nil? && event_length < 0
        fail ArgumentError, 'invalid value for "event_length", must be greater than or equal to 0.'
      end

      @event_length = event_length
    end

    # Custom attribute writer method with validation
    # @param [Object] live_dvr_sliding_window_duration Value to be assigned
    def live_dvr_sliding_window_duration=(live_dvr_sliding_window_duration)
      if !live_dvr_sliding_window_duration.nil? && live_dvr_sliding_window_duration > 86400
        fail ArgumentError, 'invalid value for "live_dvr_sliding_window_duration", must be smaller than or equal to 86400.'
      end

      if !live_dvr_sliding_window_duration.nil? && live_dvr_sliding_window_duration < 0
        fail ArgumentError, 'invalid value for "live_dvr_sliding_window_duration", must be greater than or equal to 0.'
      end

      @live_dvr_sliding_window_duration = live_dvr_sliding_window_duration
    end

    # Custom attribute writer method with validation
    # @param [Object] live_dvr_ads_window_duration Value to be assigned
    def live_dvr_ads_window_duration=(live_dvr_ads_window_duration)
      if !live_dvr_ads_window_duration.nil? && live_dvr_ads_window_duration > 600
        fail ArgumentError, 'invalid value for "live_dvr_ads_window_duration", must be smaller than or equal to 600.'
      end

      if !live_dvr_ads_window_duration.nil? && live_dvr_ads_window_duration < 0
        fail ArgumentError, 'invalid value for "live_dvr_ads_window_duration", must be greater than or equal to 0.'
      end

      @live_dvr_ads_window_duration = live_dvr_ads_window_duration
    end

    # Custom attribute writer method with validation
    # @param [Object] max_hls_protocol_version Value to be assigned
    def max_hls_protocol_version=(max_hls_protocol_version)
      if !max_hls_protocol_version.nil? && max_hls_protocol_version > 5
        fail ArgumentError, 'invalid value for "max_hls_protocol_version", must be smaller than or equal to 5.'
      end

      if !max_hls_protocol_version.nil? && max_hls_protocol_version < 1
        fail ArgumentError, 'invalid value for "max_hls_protocol_version", must be greater than or equal to 1.'
      end

      @max_hls_protocol_version = max_hls_protocol_version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          live_stream == o.live_stream &&
          region == o.region &&
          rtmp_ip_whitelist == o.rtmp_ip_whitelist &&
          channel_type == o.channel_type &&
          hls_endlist == o.hls_endlist &&
          outputs == o.outputs &&
          ad_insertion == o.ad_insertion &&
          ad_audio_loudness_level == o.ad_audio_loudness_level &&
          beacon_set == o.beacon_set &&
          reconnect_time == o.reconnect_time &&
          slate == o.slate &&
          static == o.static &&
          encryption == o.encryption &&
          event_length == o.event_length &&
          live_dvr_sliding_window_duration == o.live_dvr_sliding_window_duration &&
          live_dvr_ads_window_duration == o.live_dvr_ads_window_duration &&
          max_hls_protocol_version == o.max_hls_protocol_version &&
          notifications == o.notifications &&
          add_cdns == o.add_cdns
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [live_stream, region, rtmp_ip_whitelist, channel_type, hls_endlist, outputs, ad_insertion, ad_audio_loudness_level, beacon_set, reconnect_time, slate, static, encryption, event_length, live_dvr_sliding_window_duration, live_dvr_ads_window_duration, max_hls_protocol_version, notifications, add_cdns].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
