=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'date'

module OpenapiClient
  class CreateALiveJob200
    # Id for the stream.
    attr_accessor :id

    # The stream URL to add to your encoder configuration.
    attr_accessor :stream_url

    # The stream name to add to your encoder configuration.
    attr_accessor :stream_name

    # Details on each output rendition of the Live job.
    attr_accessor :outputs

    # Indicates that the job is a live streaming job.
    attr_accessor :live_stream

    # Setting this parameter to true will enable server side ad insertion (SSAI) on the job. Current support includes, DFP, Freewheel, or any VAST 2.0/3.0 ad tags.
    attr_accessor :ad_insertion

    # You can specify an Amazon AWS region to use for encoding a job and we will process the job on servers in the region specified. Itâ€™s recommended to use the region closest to your encoder.
    attr_accessor :region

    # The time, in seconds, to wait for a stream to reconnect to the encoder. Default is set to 30 seconds.
    attr_accessor :reconnect_time

    # Used to preset and define an end time for the live event. At any point within the specified event_length you may reconnect to your stream. The event_length setting goes into effect as soon as streaming begins.
    attr_accessor :event_length

    # Sets the maximum HLS protocol version to use. Special features will be used as available. Default is 3.
    attr_accessor :max_hls_protocol_version

    # id for slate of assets to be included
    attr_accessor :slate

    # The current state of the job&#39;s SEP (static entry point) - possible values: &#39;waiting&#39; &#39;pending_activation&#39;, &#39;activation_in_progress&#39;, &#39;ready&#39;, &#39;pending_deactivation&#39;, &#39;deactivation_in_progress&#39;, &#39;cancelled&#39;, &#39;finished&#39;
    attr_accessor :sep_state

    # Array of notification destination objects or strings.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object.
    attr_accessor :notifications

    # Array of additional CDN providers to be used for manifest generation. For each CDN provided, the manifest will be prepended accordingly
    attr_accessor :add_cdns

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'stream_url' => :'stream_url',
        :'stream_name' => :'stream_name',
        :'outputs' => :'outputs',
        :'live_stream' => :'live_stream',
        :'ad_insertion' => :'ad_insertion',
        :'region' => :'region',
        :'reconnect_time' => :'reconnect_time',
        :'event_length' => :'event_length',
        :'max_hls_protocol_version' => :'max_hls_protocol_version',
        :'slate' => :'slate',
        :'sep_state' => :'sep_state',
        :'notifications' => :'notifications',
        :'add_cdns' => :'add_cdns'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'stream_url' => :'String',
        :'stream_name' => :'String',
        :'outputs' => :'Array<Outputs>',
        :'live_stream' => :'BOOLEAN',
        :'ad_insertion' => :'BOOLEAN',
        :'region' => :'String',
        :'reconnect_time' => :'Float',
        :'event_length' => :'Float',
        :'max_hls_protocol_version' => :'Float',
        :'slate' => :'String',
        :'sep_state' => :'String',
        :'notifications' => :'Array<String>',
        :'add_cdns' => :'Array<AddCdns>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'stream_url')
        self.stream_url = attributes[:'stream_url']
      end

      if attributes.has_key?(:'stream_name')
        self.stream_name = attributes[:'stream_name']
      end

      if attributes.has_key?(:'outputs')
        if (value = attributes[:'outputs']).is_a?(Array)
          self.outputs = value
        end
      end

      if attributes.has_key?(:'live_stream')
        self.live_stream = attributes[:'live_stream']
      end

      if attributes.has_key?(:'ad_insertion')
        self.ad_insertion = attributes[:'ad_insertion']
      end

      if attributes.has_key?(:'region')
        self.region = attributes[:'region']
      end

      if attributes.has_key?(:'reconnect_time')
        self.reconnect_time = attributes[:'reconnect_time']
      end

      if attributes.has_key?(:'event_length')
        self.event_length = attributes[:'event_length']
      end

      if attributes.has_key?(:'max_hls_protocol_version')
        self.max_hls_protocol_version = attributes[:'max_hls_protocol_version']
      end

      if attributes.has_key?(:'slate')
        self.slate = attributes[:'slate']
      end

      if attributes.has_key?(:'sep_state')
        self.sep_state = attributes[:'sep_state']
      end

      if attributes.has_key?(:'notifications')
        if (value = attributes[:'notifications']).is_a?(Array)
          self.notifications = value
        end
      end

      if attributes.has_key?(:'add_cdns')
        if (value = attributes[:'add_cdns']).is_a?(Array)
          self.add_cdns = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @stream_url.nil?
        invalid_properties.push('invalid value for "stream_url", stream_url cannot be nil.')
      end

      if @stream_name.nil?
        invalid_properties.push('invalid value for "stream_name", stream_name cannot be nil.')
      end

      if @outputs.nil?
        invalid_properties.push('invalid value for "outputs", outputs cannot be nil.')
      end

      if @live_stream.nil?
        invalid_properties.push('invalid value for "live_stream", live_stream cannot be nil.')
      end

      if @ad_insertion.nil?
        invalid_properties.push('invalid value for "ad_insertion", ad_insertion cannot be nil.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if @reconnect_time.nil?
        invalid_properties.push('invalid value for "reconnect_time", reconnect_time cannot be nil.')
      end

      if @event_length.nil?
        invalid_properties.push('invalid value for "event_length", event_length cannot be nil.')
      end

      if @max_hls_protocol_version.nil?
        invalid_properties.push('invalid value for "max_hls_protocol_version", max_hls_protocol_version cannot be nil.')
      end

      if @slate.nil?
        invalid_properties.push('invalid value for "slate", slate cannot be nil.')
      end

      if @sep_state.nil?
        invalid_properties.push('invalid value for "sep_state", sep_state cannot be nil.')
      end

      if @notifications.nil?
        invalid_properties.push('invalid value for "notifications", notifications cannot be nil.')
      end

      if @add_cdns.nil?
        invalid_properties.push('invalid value for "add_cdns", add_cdns cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @stream_url.nil?
      return false if @stream_name.nil?
      return false if @outputs.nil?
      return false if @live_stream.nil?
      return false if @ad_insertion.nil?
      return false if @region.nil?
      return false if @reconnect_time.nil?
      return false if @event_length.nil?
      return false if @max_hls_protocol_version.nil?
      return false if @slate.nil?
      return false if @sep_state.nil?
      return false if @notifications.nil?
      return false if @add_cdns.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          stream_url == o.stream_url &&
          stream_name == o.stream_name &&
          outputs == o.outputs &&
          live_stream == o.live_stream &&
          ad_insertion == o.ad_insertion &&
          region == o.region &&
          reconnect_time == o.reconnect_time &&
          event_length == o.event_length &&
          max_hls_protocol_version == o.max_hls_protocol_version &&
          slate == o.slate &&
          sep_state == o.sep_state &&
          notifications == o.notifications &&
          add_cdns == o.add_cdns
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, stream_url, stream_name, outputs, live_stream, ad_insertion, region, reconnect_time, event_length, max_hls_protocol_version, slate, sep_state, notifications, add_cdns].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
