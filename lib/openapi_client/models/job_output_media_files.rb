=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'date'

module OpenapiClient
  class JobOutputMediaFiles
    # Audio bitrate of the output media file
    attr_accessor :audio_bitrate_in_kbps

    # Audio codec of the output media file
    attr_accessor :audio_codec

    # Audio sample rate of the output media file
    attr_accessor :audio_sample_rate

    # The number of audio tracks
    attr_accessor :audio_tracks

    # The number of audio channels
    attr_accessor :channels

    # ISO 8601 date-time string representing when the output file was created
    attr_accessor :created_at

    # ISO 8601 date-time string representing when the output file was created
    attr_accessor :duration_in_ms

    # File name for the DVR playlist manifest
    attr_accessor :dvr_filename

    # Type of error thrown
    attr_accessor :error_class

    # Error message thrown
    attr_accessor :error_message

    # File size
    attr_accessor :file_size_bytes

    # File name for the playlist manifest
    attr_accessor :filename

    # ISO 8601 date-time string representing when the output file was finished
    attr_accessor :finished_at

    # Format of the output file
    attr_accessor :format

    # Frame rate of the output file
    attr_accessor :frame_rate

    # Frame height of the output file
    attr_accessor :height

    # System id of the output file
    attr_accessor :id

    # Keyframe interval for the output media file
    attr_accessor :keyframe_interval

    # Whether keyframe rate for the output matches the source
    attr_accessor :keyframe_interval_follow_source

    # Whether the output is a live stream
    attr_accessor :live_stream

    # Checksum for the output file
    attr_accessor :md5_checksum

    # URL for the output file
    attr_accessor :playback_url

    # Live DVR url for live stream output
    attr_accessor :playback_url_dvr

    # URL for VOD output
    attr_accessor :playback_url_vod

    # Playlist type for playlist output
    attr_accessor :playlist_type

    # Current state of output file processing
    attr_accessor :state

    # Total bitrate of the output media file
    attr_accessor :total_bitrate_in_kbps

    # Will be playlist for playlist output
    attr_accessor :type

    # ISO 8601 date-time string representing when the output file was last modified
    attr_accessor :updated_at

    # Video bitrate of the output media file
    attr_accessor :video_bitrate_in_kbps

    # Video codec of the output media file
    attr_accessor :video_codec

    # Frame width of the output media file
    attr_accessor :width

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'audio_bitrate_in_kbps' => :'audio_bitrate_in_kbps',
        :'audio_codec' => :'audio_codec',
        :'audio_sample_rate' => :'audio_sample_rate',
        :'audio_tracks' => :'audio_tracks',
        :'channels' => :'channels',
        :'created_at' => :'created_at',
        :'duration_in_ms' => :'duration_in_ms',
        :'dvr_filename' => :'dvr_filename',
        :'error_class' => :'error_class',
        :'error_message' => :'error_message',
        :'file_size_bytes' => :'file_size_bytes',
        :'filename' => :'filename',
        :'finished_at' => :'finished_at',
        :'format' => :'format',
        :'frame_rate' => :'frame_rate',
        :'height' => :'height',
        :'id' => :'id',
        :'keyframe_interval' => :'keyframe_interval',
        :'keyframe_interval_follow_source' => :'keyframe_interval_follow_source',
        :'live_stream' => :'live_stream',
        :'md5_checksum' => :'md5_checksum',
        :'playback_url' => :'playback_url',
        :'playback_url_dvr' => :'playback_url_dvr',
        :'playback_url_vod' => :'playback_url_vod',
        :'playlist_type' => :'playlist_type',
        :'state' => :'state',
        :'total_bitrate_in_kbps' => :'total_bitrate_in_kbps',
        :'type' => :'type',
        :'updated_at' => :'updated_at',
        :'video_bitrate_in_kbps' => :'video_bitrate_in_kbps',
        :'video_codec' => :'video_codec',
        :'width' => :'width'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'audio_bitrate_in_kbps' => :'Float',
        :'audio_codec' => :'String',
        :'audio_sample_rate' => :'Float',
        :'audio_tracks' => :'Float',
        :'channels' => :'Float',
        :'created_at' => :'String',
        :'duration_in_ms' => :'Float',
        :'dvr_filename' => :'String',
        :'error_class' => :'String',
        :'error_message' => :'String',
        :'file_size_bytes' => :'Float',
        :'filename' => :'String',
        :'finished_at' => :'String',
        :'format' => :'String',
        :'frame_rate' => :'Float',
        :'height' => :'Float',
        :'id' => :'String',
        :'keyframe_interval' => :'Integer',
        :'keyframe_interval_follow_source' => :'Boolean',
        :'live_stream' => :'Boolean',
        :'md5_checksum' => :'String',
        :'playback_url' => :'String',
        :'playback_url_dvr' => :'String',
        :'playback_url_vod' => :'String',
        :'playlist_type' => :'String',
        :'state' => :'String',
        :'total_bitrate_in_kbps' => :'Float',
        :'type' => :'String',
        :'updated_at' => :'String',
        :'video_bitrate_in_kbps' => :'Float',
        :'video_codec' => :'String',
        :'width' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::JobOutputMediaFiles` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::JobOutputMediaFiles`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'audio_bitrate_in_kbps')
        self.audio_bitrate_in_kbps = attributes[:'audio_bitrate_in_kbps']
      end

      if attributes.key?(:'audio_codec')
        self.audio_codec = attributes[:'audio_codec']
      end

      if attributes.key?(:'audio_sample_rate')
        self.audio_sample_rate = attributes[:'audio_sample_rate']
      end

      if attributes.key?(:'audio_tracks')
        self.audio_tracks = attributes[:'audio_tracks']
      end

      if attributes.key?(:'channels')
        self.channels = attributes[:'channels']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'duration_in_ms')
        self.duration_in_ms = attributes[:'duration_in_ms']
      end

      if attributes.key?(:'dvr_filename')
        self.dvr_filename = attributes[:'dvr_filename']
      end

      if attributes.key?(:'error_class')
        self.error_class = attributes[:'error_class']
      end

      if attributes.key?(:'error_message')
        self.error_message = attributes[:'error_message']
      end

      if attributes.key?(:'file_size_bytes')
        self.file_size_bytes = attributes[:'file_size_bytes']
      end

      if attributes.key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.key?(:'finished_at')
        self.finished_at = attributes[:'finished_at']
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.key?(:'frame_rate')
        self.frame_rate = attributes[:'frame_rate']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'keyframe_interval')
        self.keyframe_interval = attributes[:'keyframe_interval']
      end

      if attributes.key?(:'keyframe_interval_follow_source')
        self.keyframe_interval_follow_source = attributes[:'keyframe_interval_follow_source']
      end

      if attributes.key?(:'live_stream')
        self.live_stream = attributes[:'live_stream']
      end

      if attributes.key?(:'md5_checksum')
        self.md5_checksum = attributes[:'md5_checksum']
      end

      if attributes.key?(:'playback_url')
        self.playback_url = attributes[:'playback_url']
      end

      if attributes.key?(:'playback_url_dvr')
        self.playback_url_dvr = attributes[:'playback_url_dvr']
      end

      if attributes.key?(:'playback_url_vod')
        self.playback_url_vod = attributes[:'playback_url_vod']
      end

      if attributes.key?(:'playlist_type')
        self.playlist_type = attributes[:'playlist_type']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'total_bitrate_in_kbps')
        self.total_bitrate_in_kbps = attributes[:'total_bitrate_in_kbps']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'video_bitrate_in_kbps')
        self.video_bitrate_in_kbps = attributes[:'video_bitrate_in_kbps']
      end

      if attributes.key?(:'video_codec')
        self.video_codec = attributes[:'video_codec']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @audio_bitrate_in_kbps.nil?
        invalid_properties.push('invalid value for "audio_bitrate_in_kbps", audio_bitrate_in_kbps cannot be nil.')
      end

      if @audio_codec.nil?
        invalid_properties.push('invalid value for "audio_codec", audio_codec cannot be nil.')
      end

      if @audio_sample_rate.nil?
        invalid_properties.push('invalid value for "audio_sample_rate", audio_sample_rate cannot be nil.')
      end

      if @audio_tracks.nil?
        invalid_properties.push('invalid value for "audio_tracks", audio_tracks cannot be nil.')
      end

      if @channels.nil?
        invalid_properties.push('invalid value for "channels", channels cannot be nil.')
      end

      if @duration_in_ms.nil?
        invalid_properties.push('invalid value for "duration_in_ms", duration_in_ms cannot be nil.')
      end

      if @dvr_filename.nil?
        invalid_properties.push('invalid value for "dvr_filename", dvr_filename cannot be nil.')
      end

      if @file_size_bytes.nil?
        invalid_properties.push('invalid value for "file_size_bytes", file_size_bytes cannot be nil.')
      end

      if @filename.nil?
        invalid_properties.push('invalid value for "filename", filename cannot be nil.')
      end

      if @format.nil?
        invalid_properties.push('invalid value for "format", format cannot be nil.')
      end

      if @frame_rate.nil?
        invalid_properties.push('invalid value for "frame_rate", frame_rate cannot be nil.')
      end

      if @height.nil?
        invalid_properties.push('invalid value for "height", height cannot be nil.')
      end

      if @keyframe_interval_follow_source.nil?
        invalid_properties.push('invalid value for "keyframe_interval_follow_source", keyframe_interval_follow_source cannot be nil.')
      end

      if @live_stream.nil?
        invalid_properties.push('invalid value for "live_stream", live_stream cannot be nil.')
      end

      if @total_bitrate_in_kbps.nil?
        invalid_properties.push('invalid value for "total_bitrate_in_kbps", total_bitrate_in_kbps cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @video_bitrate_in_kbps.nil?
        invalid_properties.push('invalid value for "video_bitrate_in_kbps", video_bitrate_in_kbps cannot be nil.')
      end

      if @video_codec.nil?
        invalid_properties.push('invalid value for "video_codec", video_codec cannot be nil.')
      end

      if @width.nil?
        invalid_properties.push('invalid value for "width", width cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @audio_bitrate_in_kbps.nil?
      return false if @audio_codec.nil?
      return false if @audio_sample_rate.nil?
      return false if @audio_tracks.nil?
      return false if @channels.nil?
      return false if @duration_in_ms.nil?
      return false if @dvr_filename.nil?
      return false if @file_size_bytes.nil?
      return false if @filename.nil?
      return false if @format.nil?
      return false if @frame_rate.nil?
      return false if @height.nil?
      return false if @keyframe_interval_follow_source.nil?
      return false if @live_stream.nil?
      return false if @total_bitrate_in_kbps.nil?
      return false if @type.nil?
      return false if @video_bitrate_in_kbps.nil?
      return false if @video_codec.nil?
      return false if @width.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          audio_bitrate_in_kbps == o.audio_bitrate_in_kbps &&
          audio_codec == o.audio_codec &&
          audio_sample_rate == o.audio_sample_rate &&
          audio_tracks == o.audio_tracks &&
          channels == o.channels &&
          created_at == o.created_at &&
          duration_in_ms == o.duration_in_ms &&
          dvr_filename == o.dvr_filename &&
          error_class == o.error_class &&
          error_message == o.error_message &&
          file_size_bytes == o.file_size_bytes &&
          filename == o.filename &&
          finished_at == o.finished_at &&
          format == o.format &&
          frame_rate == o.frame_rate &&
          height == o.height &&
          id == o.id &&
          keyframe_interval == o.keyframe_interval &&
          keyframe_interval_follow_source == o.keyframe_interval_follow_source &&
          live_stream == o.live_stream &&
          md5_checksum == o.md5_checksum &&
          playback_url == o.playback_url &&
          playback_url_dvr == o.playback_url_dvr &&
          playback_url_vod == o.playback_url_vod &&
          playlist_type == o.playlist_type &&
          state == o.state &&
          total_bitrate_in_kbps == o.total_bitrate_in_kbps &&
          type == o.type &&
          updated_at == o.updated_at &&
          video_bitrate_in_kbps == o.video_bitrate_in_kbps &&
          video_codec == o.video_codec &&
          width == o.width
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [audio_bitrate_in_kbps, audio_codec, audio_sample_rate, audio_tracks, channels, created_at, duration_in_ms, dvr_filename, error_class, error_message, file_size_bytes, filename, finished_at, format, frame_rate, height, id, keyframe_interval, keyframe_interval_follow_source, live_stream, md5_checksum, playback_url, playback_url_dvr, playback_url_vod, playlist_type, state, total_bitrate_in_kbps, type, updated_at, video_bitrate_in_kbps, video_codec, width].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
