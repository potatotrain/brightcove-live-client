=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module OpenapiClient
  class SSAIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Ad Configuration
    # Create a configuration for server-side ad application. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_ad_configurationbody [CreateAdConfigurationbody] Create a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def create_ad_configuration(content_type, x_api_key, create_ad_configurationbody, opts = {})
      data, _status_code, _headers = create_ad_configuration_with_http_info(content_type, x_api_key, create_ad_configurationbody, opts)
      data
    end

    # Create Ad Configuration
    # Create a configuration for server-side ad application. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_ad_configurationbody [CreateAdConfigurationbody] Create a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Integer, Hash)>] Application data, response status code and response headers
    def create_ad_configuration_with_http_info(content_type, x_api_key, create_ad_configurationbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.create_ad_configuration ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.create_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.create_ad_configuration"
      end
      # verify the required parameter 'create_ad_configurationbody' is set
      if @api_client.config.client_side_validation && create_ad_configurationbody.nil?
        fail ArgumentError, "Missing the required parameter 'create_ad_configurationbody' when calling SSAIApi.create_ad_configuration"
      end
      # resource path
      local_var_path = '/ssai/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_ad_configurationbody) 

      # return_type
      return_type = opts[:return_type] || 'Application' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#create_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Beacon Set
    # Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_beacon_setbody [CreateBeaconSetbody] Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [CreateBeaconSetResponse]
    def create_beacon_set(content_type, x_api_key, create_beacon_setbody, opts = {})
      data, _status_code, _headers = create_beacon_set_with_http_info(content_type, x_api_key, create_beacon_setbody, opts)
      data
    end

    # Create Beacon Set
    # Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_beacon_setbody [CreateBeaconSetbody] Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateBeaconSetResponse, Integer, Hash)>] CreateBeaconSetResponse data, response status code and response headers
    def create_beacon_set_with_http_info(content_type, x_api_key, create_beacon_setbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.create_beacon_set ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.create_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.create_beacon_set"
      end
      # verify the required parameter 'create_beacon_setbody' is set
      if @api_client.config.client_side_validation && create_beacon_setbody.nil?
        fail ArgumentError, "Missing the required parameter 'create_beacon_setbody' when calling SSAIApi.create_beacon_set"
      end
      # resource path
      local_var_path = '/ssai/beaconsets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_beacon_setbody) 

      # return_type
      return_type = opts[:return_type] || 'CreateBeaconSetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#create_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Ad Configuration
    # Delete an ad application. 
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [DeleteAdConfigurationResponse]
    def delete_ad_configuration(application_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts)
      data
    end

    # Delete Ad Configuration
    # Delete an ad application. 
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteAdConfigurationResponse, Integer, Hash)>] DeleteAdConfigurationResponse data, response status code and response headers
    def delete_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.delete_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_ad_configuration"
      end
      # resource path
      local_var_path = '/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeleteAdConfigurationResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Beacon Set
    # Deletes a beacon set. 
    # @param beacon_set_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [DeleteBeaconSetResponse]
    def delete_beacon_set(beacon_set_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, opts)
      data
    end

    # Delete Beacon Set
    # Deletes a beacon set. 
    # @param beacon_set_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteBeaconSetResponse, Integer, Hash)>] DeleteBeaconSetResponse data, response status code and response headers
    def delete_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_beacon_set ...'
      end
      # verify the required parameter 'beacon_set_id' is set
      if @api_client.config.client_side_validation && beacon_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'beacon_set_id' when calling SSAIApi.delete_beacon_set"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_beacon_set"
      end
      # resource path
      local_var_path = '/ssai/beaconsets/beaconset/beacon_set_id'.sub('{' + 'beacon_set_id' + '}', beacon_set_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeleteBeaconSetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Slate Media Source Asset
    # Delete Slate Media Source Asset. 
    # @param slate_msa_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [DeleteSlateMediaSourceAssetResponse]
    def delete_slate_media_source_asset(slate_msa_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = delete_slate_media_source_asset_with_http_info(slate_msa_id, content_type, x_api_key, opts)
      data
    end

    # Delete Slate Media Source Asset
    # Delete Slate Media Source Asset. 
    # @param slate_msa_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteSlateMediaSourceAssetResponse, Integer, Hash)>] DeleteSlateMediaSourceAssetResponse data, response status code and response headers
    def delete_slate_media_source_asset_with_http_info(slate_msa_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.delete_slate_media_source_asset ...'
      end
      # verify the required parameter 'slate_msa_id' is set
      if @api_client.config.client_side_validation && slate_msa_id.nil?
        fail ArgumentError, "Missing the required parameter 'slate_msa_id' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.delete_slate_media_source_asset"
      end
      # resource path
      local_var_path = '/ssai/slates/slate{slate_msa_id}'.sub('{' + 'slate_msa_id' + '}', slate_msa_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeleteSlateMediaSourceAssetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#delete_slate_media_source_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Account Ad Configurations
    # Get ad applications for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def get_account_ad_configurations(live_account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_account_ad_configurations_with_http_info(live_account_id, content_type, x_api_key, opts)
      data
    end

    # Get Account Ad Configurations
    # Get ad applications for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Integer, Hash)>] Application data, response status code and response headers
    def get_account_ad_configurations_with_http_info(live_account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_account_ad_configurations ...'
      end
      # verify the required parameter 'live_account_id' is set
      if @api_client.config.client_side_validation && live_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_account_id' when calling SSAIApi.get_account_ad_configurations"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_account_ad_configurations"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_account_ad_configurations"
      end
      # resource path
      local_var_path = '/ssai/applications/account/{live_account_id}'.sub('{' + 'live_account_id' + '}', live_account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Application' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_account_ad_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Ad Configuration
    # Get an ad application.
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def get_ad_configuration(application_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts)
      data
    end

    # Get Ad Configuration
    # Get an ad application.
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Integer, Hash)>] Application data, response status code and response headers
    def get_ad_configuration_with_http_info(application_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.get_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_ad_configuration"
      end
      # resource path
      local_var_path = '/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Application' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Beacon Sets
    # Get all beacon sets for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def get_beacon_sets(live_account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_beacon_sets_with_http_info(live_account_id, content_type, x_api_key, opts)
      data
    end

    # Get Beacon Sets
    # Get all beacon sets for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Integer, Hash)>] BeaconSet data, response status code and response headers
    def get_beacon_sets_with_http_info(live_account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_beacon_sets ...'
      end
      # verify the required parameter 'live_account_id' is set
      if @api_client.config.client_side_validation && live_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_account_id' when calling SSAIApi.get_beacon_sets"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_beacon_sets"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_beacon_sets"
      end
      # resource path
      local_var_path = '/ssai/beaconsets/account/{live_account_id}'.sub('{' + 'live_account_id' + '}', live_account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BeaconSet' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_beacon_sets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Beacon Sets for User
    # Get all beacon sets for the requesting user. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<BeaconSet>]
    def get_beacon_sets_for_user(content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_beacon_sets_for_user_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get Beacon Sets for User
    # Get all beacon sets for the requesting user. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BeaconSet>, Integer, Hash)>] Array<BeaconSet> data, response status code and response headers
    def get_beacon_sets_for_user_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_beacon_sets_for_user ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_beacon_sets_for_user"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_beacon_sets_for_user"
      end
      # resource path
      local_var_path = '/ssai/beaconsets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<BeaconSet>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_beacon_sets_for_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Slates for Account
    # Get all beacon sets for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [GetSlateMediaSourceAssetsResponse]
    def get_slates_for_account(live_account_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_slates_for_account_with_http_info(live_account_id, content_type, x_api_key, opts)
      data
    end

    # Get Slates for Account
    # Get all beacon sets for an account. 
    # @param live_account_id [String] Live account ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSlateMediaSourceAssetsResponse, Integer, Hash)>] GetSlateMediaSourceAssetsResponse data, response status code and response headers
    def get_slates_for_account_with_http_info(live_account_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_slates_for_account ...'
      end
      # verify the required parameter 'live_account_id' is set
      if @api_client.config.client_side_validation && live_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_account_id' when calling SSAIApi.get_slates_for_account"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_slates_for_account"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_slates_for_account"
      end
      # resource path
      local_var_path = '/ssai/slates/account/{live_account_id}'.sub('{' + 'live_account_id' + '}', live_account_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetSlateMediaSourceAssetsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_slates_for_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get User Slate Media Source Assets
    # Get Slate Media Source Assets for the current user. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [GetSlateMediaSourceAssetsResponse]
    def get_user_slate_media_source_assets(content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_user_slate_media_source_assets_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get User Slate Media Source Assets
    # Get Slate Media Source Assets for the current user. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSlateMediaSourceAssetsResponse, Integer, Hash)>] GetSlateMediaSourceAssetsResponse data, response status code and response headers
    def get_user_slate_media_source_assets_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.get_user_slate_media_source_assets ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.get_user_slate_media_source_assets"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.get_user_slate_media_source_assets"
      end
      # resource path
      local_var_path = '/ssai/slates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'GetSlateMediaSourceAssetsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#get_user_slate_media_source_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Ad Configurations
    # Get ad applications for the current user.
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def getuser_ad_configurations(content_type, x_api_key, opts = {})
      data, _status_code, _headers = getuser_ad_configurations_with_http_info(content_type, x_api_key, opts)
      data
    end

    # Get Ad Configurations
    # Get ad applications for the current user.
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Integer, Hash)>] Application data, response status code and response headers
    def getuser_ad_configurations_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.getuser_ad_configurations ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.getuser_ad_configurations"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.getuser_ad_configurations"
      end
      # resource path
      local_var_path = '/ssai/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Application' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#getuser_ad_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ingest Slate Media Source Asset
    # Ingest Slate Media Source Asset. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param ingest_slate_media_source_assetbody [IngestSlateMediaSourceAssetbody] Ingest Slate Media Source Asset.
    # @param [Hash] opts the optional parameters
    # @return [IngestSlateMediaSourceAssetResponse]
    def ingest_slate_media_source_asset(content_type, x_api_key, ingest_slate_media_source_assetbody, opts = {})
      data, _status_code, _headers = ingest_slate_media_source_asset_with_http_info(content_type, x_api_key, ingest_slate_media_source_assetbody, opts)
      data
    end

    # Ingest Slate Media Source Asset
    # Ingest Slate Media Source Asset. 
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param ingest_slate_media_source_assetbody [IngestSlateMediaSourceAssetbody] Ingest Slate Media Source Asset.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IngestSlateMediaSourceAssetResponse, Integer, Hash)>] IngestSlateMediaSourceAssetResponse data, response status code and response headers
    def ingest_slate_media_source_asset_with_http_info(content_type, x_api_key, ingest_slate_media_source_assetbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.ingest_slate_media_source_asset ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # verify the required parameter 'ingest_slate_media_source_assetbody' is set
      if @api_client.config.client_side_validation && ingest_slate_media_source_assetbody.nil?
        fail ArgumentError, "Missing the required parameter 'ingest_slate_media_source_assetbody' when calling SSAIApi.ingest_slate_media_source_asset"
      end
      # resource path
      local_var_path = '/ssai/slates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ingest_slate_media_source_assetbody) 

      # return_type
      return_type = opts[:return_type] || 'IngestSlateMediaSourceAssetResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#ingest_slate_media_source_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Ad Configuration
    # Update a configuration for server-side ad application. 
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param update_ad_configurationbody [UpdateAdConfigurationbody] Update a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Application]
    def update_ad_configuration(application_id, content_type, x_api_key, update_ad_configurationbody, opts = {})
      data, _status_code, _headers = update_ad_configuration_with_http_info(application_id, content_type, x_api_key, update_ad_configurationbody, opts)
      data
    end

    # Update Ad Configuration
    # Update a configuration for server-side ad application. 
    # @param application_id [String] The ad application id
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param update_ad_configurationbody [UpdateAdConfigurationbody] Update a configuration for server-side ad application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Application, Integer, Hash)>] Application data, response status code and response headers
    def update_ad_configuration_with_http_info(application_id, content_type, x_api_key, update_ad_configurationbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.update_ad_configuration ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        fail ArgumentError, "Missing the required parameter 'application_id' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.update_ad_configuration"
      end
      # verify the required parameter 'update_ad_configurationbody' is set
      if @api_client.config.client_side_validation && update_ad_configurationbody.nil?
        fail ArgumentError, "Missing the required parameter 'update_ad_configurationbody' when calling SSAIApi.update_ad_configuration"
      end
      # resource path
      local_var_path = '/ssai/applications/application/{application_id}'.sub('{' + 'application_id' + '}', application_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_ad_configurationbody) 

      # return_type
      return_type = opts[:return_type] || 'Application' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#update_ad_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Beacon Set
    # Updates a beacon set. 
    # @param beacon_set_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param update_beacon_setbody [UpdateBeaconSetbody] Updates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [BeaconSet]
    def update_beacon_set(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts = {})
      data, _status_code, _headers = update_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts)
      data
    end

    # Update Beacon Set
    # Updates a beacon set. 
    # @param beacon_set_id [String] A slate media asset ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param update_beacon_setbody [UpdateBeaconSetbody] Updates a beacon set.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BeaconSet, Integer, Hash)>] BeaconSet data, response status code and response headers
    def update_beacon_set_with_http_info(beacon_set_id, content_type, x_api_key, update_beacon_setbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SSAIApi.update_beacon_set ...'
      end
      # verify the required parameter 'beacon_set_id' is set
      if @api_client.config.client_side_validation && beacon_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'beacon_set_id' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling SSAIApi.update_beacon_set"
      end
      # verify the required parameter 'update_beacon_setbody' is set
      if @api_client.config.client_side_validation && update_beacon_setbody.nil?
        fail ArgumentError, "Missing the required parameter 'update_beacon_setbody' when calling SSAIApi.update_beacon_set"
      end
      # resource path
      local_var_path = '/ssai/beaconsets/beaconset/beacon_set_id'.sub('{' + 'beacon_set_id' + '}', beacon_set_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_beacon_setbody) 

      # return_type
      return_type = opts[:return_type] || 'BeaconSet' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SSAIApi#update_beacon_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
