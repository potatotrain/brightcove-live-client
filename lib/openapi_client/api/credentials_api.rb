=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.0.1

=end

require 'uri'

module OpenapiClient
  class CredentialsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create_Credential
    # Create a new credential. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_credentialbody Create a new credential.
    # @param [Hash] opts the optional parameters
    # @return [CreateCredential200]
    def create_credential(content_type, x_api_key, create_credentialbody, opts = {})
      data, _status_code, _headers = create_credential_with_http_info(content_type, x_api_key, create_credentialbody, opts)
      data
    end

    # Create_Credential
    # Create a new credential. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param create_credentialbody Create a new credential.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCredential200, Fixnum, Hash)>] CreateCredential200 data, response status code and response headers
    def create_credential_with_http_info(content_type, x_api_key, create_credentialbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CredentialsApi.create_credential ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CredentialsApi.create_credential"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling CredentialsApi.create_credential"
      end
      # verify the required parameter 'create_credentialbody' is set
      if @api_client.config.client_side_validation && create_credentialbody.nil?
        fail ArgumentError, "Missing the required parameter 'create_credentialbody' when calling CredentialsApi.create_credential"
      end
      # resource path
      local_var_path = '/v1/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(create_credentialbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCredential200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CredentialsApi#create_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete_Credential
    # Delete a credential. 
    # @param credential_id A credential ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credential(credential_id, content_type, x_api_key, opts = {})
      delete_credential_with_http_info(credential_id, content_type, x_api_key, opts)
      nil
    end

    # Delete_Credential
    # Delete a credential. 
    # @param credential_id A credential ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credential_with_http_info(credential_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CredentialsApi.delete_credential ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling CredentialsApi.delete_credential"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CredentialsApi.delete_credential"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling CredentialsApi.delete_credential"
      end
      # resource path
      local_var_path = '/v1/credentials/{credential_id}'.sub('{' + 'credential_id' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CredentialsApi#delete_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List_Credentials
    # This endpoint can be used to get user credentials for a given user provided one has an API key. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [ListCredentials200]
    def list_credentials(content_type, x_api_key, opts = {})
      data, _status_code, _headers = list_credentials_with_http_info(content_type, x_api_key, opts)
      data
    end

    # List_Credentials
    # This endpoint can be used to get user credentials for a given user provided one has an API key. 
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListCredentials200, Fixnum, Hash)>] ListCredentials200 data, response status code and response headers
    def list_credentials_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CredentialsApi.list_credentials ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CredentialsApi.list_credentials"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling CredentialsApi.list_credentials"
      end
      # resource path
      local_var_path = '/v1/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListCredentials200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CredentialsApi#list_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update_Credential
    # Update a credential. 
    # @param credential_id A credential ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_credentialbody Update a credential.
    # @param [Hash] opts the optional parameters
    # @return [UpdateCredential200]
    def update_credential(credential_id, content_type, x_api_key, update_credentialbody, opts = {})
      data, _status_code, _headers = update_credential_with_http_info(credential_id, content_type, x_api_key, update_credentialbody, opts)
      data
    end

    # Update_Credential
    # Update a credential. 
    # @param credential_id A credential ID
    # @param content_type Content-Type: application/json
    # @param x_api_key X-API-KEY: {APIKey}
    # @param update_credentialbody Update a credential.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateCredential200, Fixnum, Hash)>] UpdateCredential200 data, response status code and response headers
    def update_credential_with_http_info(credential_id, content_type, x_api_key, update_credentialbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CredentialsApi.update_credential ...'
      end
      # verify the required parameter 'credential_id' is set
      if @api_client.config.client_side_validation && credential_id.nil?
        fail ArgumentError, "Missing the required parameter 'credential_id' when calling CredentialsApi.update_credential"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling CredentialsApi.update_credential"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling CredentialsApi.update_credential"
      end
      # verify the required parameter 'update_credentialbody' is set
      if @api_client.config.client_side_validation && update_credentialbody.nil?
        fail ArgumentError, "Missing the required parameter 'update_credentialbody' when calling CredentialsApi.update_credential"
      end
      # resource path
      local_var_path = '/v1/credentials/{credential_id}'.sub('{' + 'credential_id' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(update_credentialbody)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UpdateCredential200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CredentialsApi#update_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
