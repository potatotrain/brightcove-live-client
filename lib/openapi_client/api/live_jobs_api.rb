=begin
#Live API Reference

#Reference for the Brightcove Live API, used to create and manage live streaming events.  For additional in-depth guides to features of the API, see the **[Support Site](https://support.brightcove.com/live-api)**.  **Base URL**: https://api.bcovlive.io/v1

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0

=end

require 'uri'

module OpenapiClient
  class LiveJobsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activate SEP Stream
    # Activate SEP (static entry point) Stream
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [ActivateSepStreamResponse]
    def activate_sep_stream(job_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = activate_sep_stream_with_http_info(job_id, content_type, x_api_key, opts)
      data
    end

    # Activate SEP Stream
    # Activate SEP (static entry point) Stream
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivateSepStreamResponse, Integer, Hash)>] ActivateSepStreamResponse data, response status code and response headers
    def activate_sep_stream_with_http_info(job_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.activate_sep_stream ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.activate_sep_stream"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.activate_sep_stream"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.activate_sep_stream"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/activate'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ActivateSepStreamResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#activate_sep_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add or update Ad Metadata
    # Allows  content metadata to be pushed and constantly updated out-of-band from a customer live stream..
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param add_ad_matadatabody [AddAdMatadatabody] Contains a set of key/value pairs for ad requests.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_ad_matadata(job_id, content_type, x_api_key, add_ad_matadatabody, opts = {})
      add_ad_matadata_with_http_info(job_id, content_type, x_api_key, add_ad_matadatabody, opts)
      nil
    end

    # Add or update Ad Metadata
    # Allows  content metadata to be pushed and constantly updated out-of-band from a customer live stream..
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param add_ad_matadatabody [AddAdMatadatabody] Contains a set of key/value pairs for ad requests.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def add_ad_matadata_with_http_info(job_id, content_type, x_api_key, add_ad_matadatabody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.add_ad_matadata ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.add_ad_matadata"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.add_ad_matadata"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.add_ad_matadata"
      end
      # verify the required parameter 'add_ad_matadatabody' is set
      if @api_client.config.client_side_validation && add_ad_matadatabody.nil?
        fail ArgumentError, "Missing the required parameter 'add_ad_matadatabody' when calling LiveJobsApi.add_ad_matadata"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/cuepointdata'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(add_ad_matadatabody) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#add_ad_matadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel Live Job
    # Cancel a live stream. When a live job is cancelled, it is ended, and any unprocessed VOD jobs associated with the live job will **not** be processed.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [CancelLiveJob]
    def cancel_live_job(job_id, x_api_key, opts = {})
      data, _status_code, _headers = cancel_live_job_with_http_info(job_id, x_api_key, opts)
      data
    end

    # Cancel Live Job
    # Cancel a live stream. When a live job is cancelled, it is ended, and any unprocessed VOD jobs associated with the live job will **not** be processed.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelLiveJob, Integer, Hash)>] CancelLiveJob data, response status code and response headers
    def cancel_live_job_with_http_info(job_id, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.cancel_live_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.cancel_live_job"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.cancel_live_job"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/cancel'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CancelLiveJob' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#cancel_live_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Live Job
    # Create a live streaming job
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_live_job_request_body [CreateLiveJobRequestBody] Create a live stream
    # @param [Hash] opts the optional parameters
    # @return [LiveJob]
    def create_a_live_job(content_type, x_api_key, create_live_job_request_body, opts = {})
      data, _status_code, _headers = create_a_live_job_with_http_info(content_type, x_api_key, create_live_job_request_body, opts)
      data
    end

    # Create a Live Job
    # Create a live streaming job
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param create_live_job_request_body [CreateLiveJobRequestBody] Create a live stream
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveJob, Integer, Hash)>] LiveJob data, response status code and response headers
    def create_a_live_job_with_http_info(content_type, x_api_key, create_live_job_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.create_a_live_job ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.create_a_live_job"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.create_a_live_job"
      end
      # verify the required parameter 'create_live_job_request_body' is set
      if @api_client.config.client_side_validation && create_live_job_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_live_job_request_body' when calling LiveJobsApi.create_a_live_job"
      end
      # resource path
      local_var_path = '/jobs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_live_job_request_body) 

      # return_type
      return_type = opts[:return_type] || 'LiveJob' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#create_a_live_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Playback Token
    # Live jobs created via the Live module in Studio (or by specifying `videocloud.video` when creating a job directly through the API) automatically create a special Video Cloud video that, when used in a Brightcove player, makes use of the `ad_config_id` property to select the specific source desired (i.e. SSAI source, DVR/no DVR, BYOCDN). Jobs which have SSAI enabled must always provide an `ad_config_id` in the player, even if the source desired is non-SSAI (this prevents an end user from omitting the `ad_config_id` and receiving a clear stream). **This applies only to live Video Cloud videos created via the Live module or Live API - manually created Video Cloud remote assets have no such restriction.**  The request returns a generated `ad_config_id`.  This behavior is handled automatically when you publish a live video from the Live module publishing screen, but may be useful if you have a custom workflow.
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePlaybackTokenRequestBody] :create_playback_token_request_body Create a live stream
    # @return [PlaybackToken]
    def create_playback_token(job_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = create_playback_token_with_http_info(job_id, content_type, x_api_key, opts)
      data
    end

    # Create Playback Token
    # Live jobs created via the Live module in Studio (or by specifying &#x60;videocloud.video&#x60; when creating a job directly through the API) automatically create a special Video Cloud video that, when used in a Brightcove player, makes use of the &#x60;ad_config_id&#x60; property to select the specific source desired (i.e. SSAI source, DVR/no DVR, BYOCDN). Jobs which have SSAI enabled must always provide an &#x60;ad_config_id&#x60; in the player, even if the source desired is non-SSAI (this prevents an end user from omitting the &#x60;ad_config_id&#x60; and receiving a clear stream). **This applies only to live Video Cloud videos created via the Live module or Live API - manually created Video Cloud remote assets have no such restriction.**  The request returns a generated &#x60;ad_config_id&#x60;.  This behavior is handled automatically when you publish a live video from the Live module publishing screen, but may be useful if you have a custom workflow.
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @option opts [CreatePlaybackTokenRequestBody] :create_playback_token_request_body Create a live stream
    # @return [Array<(PlaybackToken, Integer, Hash)>] PlaybackToken data, response status code and response headers
    def create_playback_token_with_http_info(job_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.create_playback_token ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.create_playback_token"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.create_playback_token"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.create_playback_token"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/playback-token'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'create_playback_token_request_body']) 

      # return_type
      return_type = opts[:return_type] || 'PlaybackToken' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#create_playback_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deactivate SEP Stream
    # Deactivate SEP (static entry point) Stream 
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [DeactivateSepStreamResponse]
    def deactivate_sep_stream(job_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = deactivate_sep_stream_with_http_info(job_id, content_type, x_api_key, opts)
      data
    end

    # Deactivate SEP Stream
    # Deactivate SEP (static entry point) Stream 
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeactivateSepStreamResponse, Integer, Hash)>] DeactivateSepStreamResponse data, response status code and response headers
    def deactivate_sep_stream_with_http_info(job_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.deactivate_sep_stream ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.deactivate_sep_stream"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.deactivate_sep_stream"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.deactivate_sep_stream"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/deactivate'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeactivateSepStreamResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#deactivate_sep_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Ad Metadata
    # Deletes ad metadata from a customer live stream..
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ad_matadata(job_id, content_type, x_api_key, opts = {})
      delete_ad_matadata_with_http_info(job_id, content_type, x_api_key, opts)
      nil
    end

    # Delete Ad Metadata
    # Deletes ad metadata from a customer live stream..
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_ad_matadata_with_http_info(job_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.delete_ad_matadata ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.delete_ad_matadata"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.delete_ad_matadata"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.delete_ad_matadata"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/cuepointdata'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#delete_ad_matadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Live Job Details
    # Get Live Job Details
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Job]
    def get_live_job_details(job_id, content_type, x_api_key, opts = {})
      data, _status_code, _headers = get_live_job_details_with_http_info(job_id, content_type, x_api_key, opts)
      data
    end

    # Get Live Job Details
    # Get Live Job Details
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def get_live_job_details_with_http_info(job_id, content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.get_live_job_details ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.get_live_job_details"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.get_live_job_details"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.get_live_job_details"
      end
      # resource path
      local_var_path = '/jobs/{job_id}'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Job' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#get_live_job_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert ID3 Timed Metadata
    # Inserts an ID3 timed metadata tag for an ongoing job. Note that: 1) If using timecode property, the job only stores the most recent request for insertion; 2) If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param insert_id3_timed_metadatabody [InsertId3TimedMetadatabody] &#39;Inserts an ID3 timed metadata tag for an ongoing job. Note that:   1. If using timecode property, the job only stores the most recent request for insertion   2. If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI&#39;
    # @param [Hash] opts the optional parameters
    # @return [InsertId3TimedMetadataResponse]
    def insert_id3_timed_metadata(job_id, content_type, x_api_key, insert_id3_timed_metadatabody, opts = {})
      data, _status_code, _headers = insert_id3_timed_metadata_with_http_info(job_id, content_type, x_api_key, insert_id3_timed_metadatabody, opts)
      data
    end

    # Insert ID3 Timed Metadata
    # Inserts an ID3 timed metadata tag for an ongoing job. Note that: 1) If using timecode property, the job only stores the most recent request for insertion; 2) If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param insert_id3_timed_metadatabody [InsertId3TimedMetadatabody] &#39;Inserts an ID3 timed metadata tag for an ongoing job. Note that:   1. If using timecode property, the job only stores the most recent request for insertion   2. If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI&#39;
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertId3TimedMetadataResponse, Integer, Hash)>] InsertId3TimedMetadataResponse data, response status code and response headers
    def insert_id3_timed_metadata_with_http_info(job_id, content_type, x_api_key, insert_id3_timed_metadatabody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.insert_id3_timed_metadata ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.insert_id3_timed_metadata"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.insert_id3_timed_metadata"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.insert_id3_timed_metadata"
      end
      # verify the required parameter 'insert_id3_timed_metadatabody' is set
      if @api_client.config.client_side_validation && insert_id3_timed_metadatabody.nil?
        fail ArgumentError, "Missing the required parameter 'insert_id3_timed_metadatabody' when calling LiveJobsApi.insert_id3_timed_metadata"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/id3tag'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(insert_id3_timed_metadatabody) 

      # return_type
      return_type = opts[:return_type] || 'InsertId3TimedMetadataResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#insert_id3_timed_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Live Jobs
    # 'List live jobs - for additional useful information on the search filters, see [Getting a List of Live or VOD Jobs](https://support.brightcove.com/getting-list-live-or-vod-jobs)'
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_token Next token from previous page; do not specify when fetching first page
    # @option opts [Integer] :page_size Max number of jobs to return in one request (1-1000, default is 10) (default to 10)
    # @option opts [String] :sort Attribute to sort jobs by (&#x60;created_at&#x60; | &#x60;modified_at&#x60;, default is &#x60;created_at&#x60;) (default to 'created_at')
    # @option opts [String] :sort_dir Sort direction (default is asc):&#x60;asc&#x60; - ascending; &#x60;desc&#x60; - descending (default to 'asc')
    # @option opts [OneOfstringarray] :user_id Filter results by one or more user IDs
    # @option opts [String] :account_id Filter results by particular account, or specify ‘*’ to search all accounts.  Default value is account API key belongs to
    # @option opts [Integer] :created_at Filter results by Unix time of job creation (in milliseconds)
    # @option opts [Integer] :modified_at Filter results by Unix time of job last modified (in milliseconds)
    # @option opts [Boolean] :ad_insertion Filter results by is SSAI enabled
    # @option opts [Boolean] :static Filter results by has static endpoint
    # @option opts [OneOfstringarray] :state Filter results by one or more job states
    # @option opts [OneOfstringarray] :ssai_state Filter results by one or more SSAI states
    # @option opts [OneOfstringarray] :region Filter results by one or more regions
    # @return [ListLiveJobsResponse]
    def list_live_jobs(content_type, x_api_key, opts = {})
      data, _status_code, _headers = list_live_jobs_with_http_info(content_type, x_api_key, opts)
      data
    end

    # List Live Jobs
    # &#39;List live jobs - for additional useful information on the search filters, see [Getting a List of Live or VOD Jobs](https://support.brightcove.com/getting-list-live-or-vod-jobs)&#39;
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :start_token Next token from previous page; do not specify when fetching first page
    # @option opts [Integer] :page_size Max number of jobs to return in one request (1-1000, default is 10)
    # @option opts [String] :sort Attribute to sort jobs by (&#x60;created_at&#x60; | &#x60;modified_at&#x60;, default is &#x60;created_at&#x60;)
    # @option opts [String] :sort_dir Sort direction (default is asc):&#x60;asc&#x60; - ascending; &#x60;desc&#x60; - descending
    # @option opts [OneOfstringarray] :user_id Filter results by one or more user IDs
    # @option opts [String] :account_id Filter results by particular account, or specify ‘*’ to search all accounts.  Default value is account API key belongs to
    # @option opts [Integer] :created_at Filter results by Unix time of job creation (in milliseconds)
    # @option opts [Integer] :modified_at Filter results by Unix time of job last modified (in milliseconds)
    # @option opts [Boolean] :ad_insertion Filter results by is SSAI enabled
    # @option opts [Boolean] :static Filter results by has static endpoint
    # @option opts [OneOfstringarray] :state Filter results by one or more job states
    # @option opts [OneOfstringarray] :ssai_state Filter results by one or more SSAI states
    # @option opts [OneOfstringarray] :region Filter results by one or more regions
    # @return [Array<(ListLiveJobsResponse, Integer, Hash)>] ListLiveJobsResponse data, response status code and response headers
    def list_live_jobs_with_http_info(content_type, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.list_live_jobs ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.list_live_jobs"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.list_live_jobs"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LiveJobsApi.list_live_jobs, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling LiveJobsApi.list_live_jobs, must be greater than or equal to 1.'
      end

      allowable_values = ["created_at", "modified_at"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_dir'] && !allowable_values.include?(opts[:'sort_dir'])
        fail ArgumentError, "invalid value for \"sort_dir\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/jobs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start_token'] = opts[:'start_token'] if !opts[:'start_token'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'account_id'] = opts[:'account_id'] if !opts[:'account_id'].nil?
      query_params[:'created_at'] = opts[:'created_at'] if !opts[:'created_at'].nil?
      query_params[:'modified_at'] = opts[:'modified_at'] if !opts[:'modified_at'].nil?
      query_params[:'ad_insertion'] = opts[:'ad_insertion'] if !opts[:'ad_insertion'].nil?
      query_params[:'static'] = opts[:'static'] if !opts[:'static'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'ssai_state'] = opts[:'ssai_state'] if !opts[:'ssai_state'].nil?
      query_params[:'region'] = opts[:'region'] if !opts[:'region'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ListLiveJobsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#list_live_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manual Cue Point Insertion
    # Inserts a manual Cue-Out with a duration to the Live ingest point.
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param manual_ad_cue_point_insertionbody [ManualAdCuePointInsertionbody] Inserts a manual Cue-Out with a duration to the Live ingest point.
    # @param [Hash] opts the optional parameters
    # @return [ManualAdCuePointInsertionResponse]
    def manual_ad_cue_point_insertion(job_id, content_type, x_api_key, manual_ad_cue_point_insertionbody, opts = {})
      data, _status_code, _headers = manual_ad_cue_point_insertion_with_http_info(job_id, content_type, x_api_key, manual_ad_cue_point_insertionbody, opts)
      data
    end

    # Manual Cue Point Insertion
    # Inserts a manual Cue-Out with a duration to the Live ingest point.
    # @param job_id [String] Live job ID
    # @param content_type [String] Content-Type: application/json
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param manual_ad_cue_point_insertionbody [ManualAdCuePointInsertionbody] Inserts a manual Cue-Out with a duration to the Live ingest point.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ManualAdCuePointInsertionResponse, Integer, Hash)>] ManualAdCuePointInsertionResponse data, response status code and response headers
    def manual_ad_cue_point_insertion_with_http_info(job_id, content_type, x_api_key, manual_ad_cue_point_insertionbody, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.manual_ad_cue_point_insertion ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.manual_ad_cue_point_insertion"
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling LiveJobsApi.manual_ad_cue_point_insertion"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.manual_ad_cue_point_insertion"
      end
      # verify the required parameter 'manual_ad_cue_point_insertionbody' is set
      if @api_client.config.client_side_validation && manual_ad_cue_point_insertionbody.nil?
        fail ArgumentError, "Missing the required parameter 'manual_ad_cue_point_insertionbody' when calling LiveJobsApi.manual_ad_cue_point_insertion"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/cuepoint'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Content-Type'] = content_type
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(manual_ad_cue_point_insertionbody) 

      # return_type
      return_type = opts[:return_type] || 'ManualAdCuePointInsertionResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#manual_ad_cue_point_insertion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop Live Job
    # Stop a live job. When a live job is stopped (as opposed to cancelled), the live stream will stop, but any VOD jobs associated with the live job **will** continue to process.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [StopLiveJob]
    def stop_live_job(job_id, x_api_key, opts = {})
      data, _status_code, _headers = stop_live_job_with_http_info(job_id, x_api_key, opts)
      data
    end

    # Stop Live Job
    # Stop a live job. When a live job is stopped (as opposed to cancelled), the live stream will stop, but any VOD jobs associated with the live job **will** continue to process.
    # @param job_id [String] Live job ID
    # @param x_api_key [String] X-API-KEY: {Your_Live_API_Key}
    # @param [Hash] opts the optional parameters
    # @return [Array<(StopLiveJob, Integer, Hash)>] StopLiveJob data, response status code and response headers
    def stop_live_job_with_http_info(job_id, x_api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveJobsApi.stop_live_job ...'
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling LiveJobsApi.stop_live_job"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling LiveJobsApi.stop_live_job"
      end
      # resource path
      local_var_path = '/jobs/{job_id}/stop'.sub('{' + 'job_id' + '}', job_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-API-KEY'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'StopLiveJob' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveJobsApi#stop_live_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
